<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://septsea.github.io/</id>
    <title>septsea</title>
    <updated>2020-04-20T12:17:54.455Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://septsea.github.io/"/>
    <link rel="self" href="https://septsea.github.io/atom.xml"/>
    <subtitle>This is septsea&apos;s website.</subtitle>
    <logo>https://septsea.github.io/images/avatar.png</logo>
    <icon>https://septsea.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, septsea</rights>
    <entry>
        <title type="html"><![CDATA[Solving optimal problems with Python]]></title>
        <id>https://septsea.github.io/post/solving-optimal-problems-with-python/</id>
        <link href="https://septsea.github.io/post/solving-optimal-problems-with-python/">
        </link>
        <updated>2020-04-20T06:30:00.000Z</updated>
        <content type="html"><![CDATA[<p>这里我用 Python 解优化问题。若本机无 Python, 可以在 <code>https://c.runoob.com/compile/9</code> 运行这些程序。</p>
<p>Question 1. 用 0.618 法求以下问题的近似解</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mi>min</mi><mo>⁡</mo><mrow><mi>t</mi><mo>≥</mo><mn>0</mn></mrow></munder><mrow><mi>φ</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow><mo>=</mo><mo>−</mo><mn>2</mn><msup><mi>t</mi><mn>3</mn></msup><mo>+</mo><mn>21</mn><msup><mi>t</mi><mn>2</mn></msup><mo>−</mo><mn>60</mn><mi>t</mi><mo>+</mo><mn>50</mn></mrow><annotation encoding="application/x-tex">\min_{t \geq 0} {\varphi(t)} = -2t^3+21t^2-60t+50
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.562287em;vertical-align:-0.812287em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-2.082892em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mrel mtight">≥</span><span class="mord mtight">0</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.812287em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">2</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">1</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mord">0</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">0</span></span></span></span></span></p>
<p>已知函数的单谷区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>0.5</mn><mo separator="true">,</mo><mn>3.5</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[0.5,3.5]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mord">.</span><span class="mord">5</span><span class="mclose">]</span></span></span></span>, 要求最后区间精度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ε</mi><mo>=</mo><mn>0.8</mn></mrow><annotation encoding="application/x-tex">\varepsilon = 0.8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">8</span></span></span></span>。</p>
<p>Solution. 可以编写如下程序进行运算:</p>
<pre><code class="language-python">def approxGolden(func, a0, b0, epsilon):
    &quot;&quot;&quot;
    Given [a0, b0], epsilon (accuracy),
    minimize the function by the 0.618 method.

    func: the function.

    a0, b0: the interval in which the optimal solution is.

    epsilon: the (interval) accuracy.

    A dictionary will be returned.
    &quot;&quot;&quot;
    info = []
    a: float = a0
    b: float = b0
    omega: float = 0.618
    t1: float = b - omega * (b - a)
    t2: float = a + omega * (b - a)
    p1: float = func(t1)
    p2: float = func(t2)
    p1_not_greater_p2: bool = p1 &lt;= p2
    change: str = &quot;b&quot; if p1_not_greater_p2 else &quot;a&quot;
    info.append([a, b, t1, t2, p1, p2, p1_not_greater_p2, change])
    while (True):
        if (p1_not_greater_p2):
            if (t2 - a &lt;= epsilon):
                return {&quot;iterationInfo&quot;: info, &quot;t_star&quot;: t1}
            else:
                b = t2
                t2 = t1
                t1 = b - omega * (b - a)
                p2 = p1
                p1 = func(t1)
                p1_not_greater_p2 = p1 &lt;= p2
                change = &quot;b&quot; if p1_not_greater_p2 else &quot;a&quot;
                info.append([a, b, t1, t2, p1, p2, p1_not_greater_p2, change])
        else:
            if (b - t1 &lt;= epsilon):
                return {&quot;iterationInfo&quot;: info, &quot;t_star&quot;: t2}
            else:
                a = t1
                t1 = t2
                t2 = a + omega * (b - a)
                p1 = p2
                p2 = func(t2)
                p1_not_greater_p2 = p1 &lt;= p2
                change = &quot;b&quot; if p1_not_greater_p2 else &quot;a&quot;
                info.append([a, b, t1, t2, p1, p2, p1_not_greater_p2, change])


def main(*args, **kwargs):
    &quot;&quot;&quot;
    The entrance of the program.
    &quot;&quot;&quot;
    f = lambda t: -2 * t**3 + 21 * t**2 - 60 * t + 50  # a**b means a^b
    a: float = 0.5
    b: float = 3.5
    e: float = 0.8
    ans = approxGolden(f, a, b, e)
    it = ans[&quot;iterationInfo&quot;]  # it: iterationTable
    t_star: float = ans[&quot;t_star&quot;]
    titles = [&quot;a&quot;, &quot;b&quot;, &quot;t1&quot;, &quot;t2&quot;, &quot;φ1&quot;, &quot;φ2&quot;, &quot;φ1&lt;=φ2?&quot;, &quot;Change&quot;]
    print(&quot;\t&quot;.join(titles))
    for item in it:
        print(&quot;%.4f\t%.4f\t%.4f\t%.4f\t%.4f\t%.4f\t&quot; %
              (item[0], item[1], item[2], item[3], item[4], item[5]) +
              &quot;{0}\t{1}&quot;.format(&quot;Y&quot; if item[6] else &quot;N&quot;, item[7]))
    if (it[-1][7] == &quot;a&quot;):  # if a is changed
        print(&quot;%.4f\t%.4f&quot; % (it[-1][2], it[-1][1]))
    else:
        print(&quot;%.4f\t%.4f&quot; % (it[-1][0], it[-1][3]))
    print(&quot;&quot;)
    print(&quot;The approximate optimal solution: %.4f&quot; % (t_star))
    print(&quot;The approximate optimal value: %.4f&quot; % (f(t_star)))


main()
</code></pre>
<p>结果如下:</p>
<pre><code>a       b       t1      t2      φ1      φ2      φ1≤φ2?  Change
0.5000  3.5000  1.6460  2.3540  -0.7834 -0.9609 N       a
1.6460  3.5000  2.3540  2.7918  -0.9609 2.6494  Y       b
1.6460  2.7918  2.0837  2.3540  -1.9381 -0.9609 Y       b
1.6460  2.3540

The approximate optimal solution: 2.0837
The approximate optimal value: -1.9381
</code></pre>
<hr>
<p>Question 2. 用 Newton 法求以下问题的近似最优解</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>min</mi><mo>⁡</mo><mrow><mi>φ</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow><mo>=</mo><msup><mi>t</mi><mn>4</mn></msup><mo>−</mo><mn>4</mn><msup><mi>t</mi><mn>3</mn></msup><mo>−</mo><mn>6</mn><msup><mi>t</mi><mn>2</mn></msup><mo>−</mo><mn>16</mn><mi>t</mi><mo>+</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">    \min {\varphi(t)} = t^4-4t^3-6t^2-16t+4
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span></span></p>
<p>给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub><mo>=</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">t_1=6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ε</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\varepsilon=10^{-3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span>。并用解析方法求出该问题的精确最优解, 然后比较二者结果。</p>
<p>Solution. 可以编写如下程序进行运算:</p>
<pre><code class="language-python">def newton(func, df1, df2, in_pt, epsilon):
    &quot;&quot;&quot;
    Given the initial point in_pt, epsilon (accuracy),
    minimize the function by the Newton method.

    func: the function.

    d1: the first-order derivative.

    d2: the second-order derivative.

    (It is not easy to implement the calculation
    module of derivatives.)

    in_pt: the initial point.

    epsilon: the accuracy.

    A dictionary will be returned.
    &quot;&quot;&quot;
    info = []
    t1: float = in_pt
    t2: float = 0  # for initialization
    d1: float = df1(t1)
    d2: float = df2(t1)
    info.append([t1, d1, 1 / d2])
    while (True):
        if (abs(d1) &lt; epsilon):
            return {&quot;iterationInfo&quot;: info, &quot;t_star&quot;: t1}
        elif (abs(d2) &lt; 1e-10):  # if d2 == 0
            raise Exception(&quot;Failed!&quot;)
        else:
            t2 = t1 - d1 / d2
            if (abs(t2 - t1) &lt; epsilon):
                return {&quot;iterationInfo&quot;: info, &quot;t_star&quot;: t2}
            else:
                t1 = t2
                d1 = df1(t1)
                d2 = df2(t1)
                info.append([t1, d1, 1 / d2])


def main(*args, **kwargs):
    &quot;&quot;&quot;
    The entrance.
    &quot;&quot;&quot;
    f = lambda t: t**4 - 4 * t**3 - 6 * t**2 - 16 * t + 4  # a**b means a^b
    df1 = lambda t: 4 * t**3 - 12 * t**2 - 12 * t - 16
    df2 = lambda t: 12 * t**2 - 24 * t - 12
    initial_point: float = 6
    e: float = 1e-3
    ans = newton(f, df1, df2, initial_point, e)
    it = ans[&quot;iterationInfo&quot;]  # it: iterationTable
    t_star: float = ans[&quot;t_star&quot;]
    titles = [&quot;tk&quot;, &quot;φ'(tk)&quot;, &quot;1/φ''(tk)&quot;]
    print(&quot;\t&quot;.join(titles))
    for item in it:
        print(&quot;%.10f\t%.10f\t%.10f\t&quot; % (item[0], item[1], item[2]))
    print(&quot;%.10f&quot; % (t_star))
    print(&quot;&quot;)
    print(&quot;The approximate optimal solution: %.10f&quot; % (t_star))
    print(&quot;The approximate optimal value: %.10f&quot; % (f(t_star)))


main()
</code></pre>
<p>结果如下:</p>
<pre><code>tk              φ'(tk)                  1/φ''(tk)
6.000000000000  344.000000000000        0.003623188406
4.753623188406  85.462547449233         0.006892927257
4.164536065619  14.813443078421         0.010398095005
4.010504477134  0.886353101087          0.011798345536
4.000046976980  0.003946145789          0.011904282563
4.000000000946

The approximate optimal solution: 4.000000000946
The approximate optimal value: -156.000000000000
</code></pre>
<p>注意到</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>φ</mi><mo>(</mo><mi>t</mi><mo>)</mo><mo>=</mo><mo>(</mo><mi>t</mi><mo>−</mo><mn>4</mn><msup><mo>)</mo><mn>2</mn></msup><mo>(</mo><mo>(</mo><mi>t</mi><mo>+</mo><mn>2</mn><msup><mo>)</mo><mn>2</mn></msup><mo>+</mo><mn>6</mn><mo>)</mo><mo>−</mo><mn>156</mn></mrow><annotation encoding="application/x-tex">\varphi(t) = (t-4)^2 ((t+2)^2+6) - 156
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mord">6</span></span></span></span></span></p>
<p>由此易知 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>φ</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\varphi(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">t=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span> 有最小值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>156</mn></mrow><annotation encoding="application/x-tex">-156</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">5</span><span class="mord">6</span></span></span></span>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Another module (2)]]></title>
        <id>https://septsea.github.io/post/another-module-2/</id>
        <link href="https://septsea.github.io/post/another-module-2/">
        </link>
        <updated>2020-04-14T05:13:13.000Z</updated>
        <content type="html"><![CDATA[<p>又写了个 module, 用来近似计算积分的。写这玩意儿大概用了 20 min 吧。害。也许会有 update。</p>
<pre><code class="language-python">def trapezoidal(f, a, b, n: int = 1, exactValue=None) -&gt; list:
    &quot;&quot;&quot;
    A method for approximating ∫[a,b] f(x)dx using the trapezoidal method.

    The formula is

    h/2 * (f(x_0) + 2 * sum(f(x_i), 1&lt;=i&lt;n) + f(x_n))

    where x_j = a + h * j, 0&lt;=j&lt;=n, h = (b-a)/n

    `f`: the function.

    `a`, `b`: the limits of the integral.

    `n`: (optional) the number of subintervals. If not specified, it is 1.

    `exactValue`: (optional) the exact value of the integral.
    If it is provided, the (absolute) error (approx - exact) will be given.

    The result is a list containing two elements: `[approx, error]`.
    If `exactValue` is not provided, `error` will be `None`.
    &quot;&quot;&quot;
    h = (b - a) / n
    approx = h / 2 * (f(a) + 2 * sum(map(f, [a + i * h
                                             for i in range(1, n)])) + f(b))
    error = None
    if (exactValue != None):
        error = approx - exactValue
    return [approx, error]


def parabolic(f, a, b, n: int = 1, exactValue=None) -&gt; list:
    &quot;&quot;&quot;
    A method for approximating ∫[a,b] f(x)dx using the parabolic method.

    The formula is

    h/3 * (f(x_0) + 4 * sum(f(x_(2*i-1)), 1&lt;=i&lt;=n) + 2 * sum(f_(2*i), 1&lt;=i&lt;n) + f(x_(2*n)))

    where x_j = a + h * j, 0&lt;=j&lt;=2*n, h = (b-a)/(2*n)

    `f`: the function.

    `a`, `b`: the limits of the integral.

    `n`: (optional) HALF of the number of subintervals.
    (That is to say, 2*n subintervals will be used.)
    If not specified, it is 1.

    `exactValue`: (optional) the exact value of the integral.
    If it is provided, the (absolute) error (approx - exact) will be given.

    The result is a list containing two elements: `[approx, error]`.
    If `exactValue` is not provided, `error` will be `None`.
    &quot;&quot;&quot;
    h = (b - a) / (2 * n)
    approx = h / 3 * (
        f(a) + 4 * sum(map(f, [a + (2 * i - 1) * h
                               for i in range(1, n + 1)])) +
        2 * sum(map(f, [a + (2 * i) * h for i in range(1, n)])) + f(b))
    error = None
    if (exactValue != None):
        error = approx - exactValue
    return [approx, error]


def comparison(f, a, b, n: int = 2, exactValue=None) -&gt; str:
    &quot;&quot;&quot;
    A comparison of 2 methods: the trapezoidal method &amp; the parabolic method.

    `f`: the function.

    `a`, `b`: the limits of the integral.

    `n`: (optional) the number of subintervals.
    `n` must be even and &gt; 0. If not, an exception will be raised.
    If `n` is not specified, it is 2.

    `exactValue`: (optional) the exact value of the integral.
    If it is provided, the absolute error (approx - exact) will be given.

    The result is a list containing two elements: `[approx, error]`.
    If `exactValue` is not provided, `error` will be `None`.
    &quot;&quot;&quot;
    if (n % 2 != 0 or n &lt;= 0):
        raise Exception(&quot;n must be an even integer &gt; 0&quot;)
    l1 = trapezoidal(f, a, b, n, exactValue)
    l2 = parabolic(f, a, b, n // 2, exactValue)
    info1 = f&quot;&quot;&quot;The approximate value by the trapezoidal method is {l1[0]}.
The approximate value by the parabolic method is   {l2[0]}.&quot;&quot;&quot;
    if (exactValue != None):
        info2 = f&quot;&quot;&quot;Output:

The exact value is                                 {exactValue}.
{info1}

Error (using the trapezoidal method):              {l1[1]}
Error (using the parabolic method):                {l2[1]}

The {&quot;trapezoidal&quot; if abs(l1[1]) &lt; abs(l2[1]) else &quot;parabolic&quot;} method is better.
&quot;&quot;&quot;
        return info2
    else:
        return info1

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[A module from scratch]]></title>
        <id>https://septsea.github.io/post/a-module-from-scratch/</id>
        <link href="https://septsea.github.io/post/a-module-from-scratch/">
        </link>
        <updated>2020-04-07T05:13:13.000Z</updated>
        <content type="html"><![CDATA[<p>最近要用最小二乘法处理一些数据。手算过慢 (其实总时间挺少的), 就考虑用 PC Apps 计算。MATLAB 用不太来; Excel 也用不太来 (不知道能不能作多元线性回归, 不过一元回归是相当容易与直观的, dummies 也会); SPSS 等软件也不是每个人都有。彳亍, 那就 JavaScript or Python? 想了一下, 为了照顾 them, 还是用 Python 吧。不过问题又来了: 标准的 Python 可安装 <code>numpy</code>, <code>scipy</code> 库; 我的魔改极速版 Python 不太方便安装第三方库。告诉 them 安装库, they tell me 下载太慢, failed。</p>
<p>问题就挺多的, 害。想了一下, 老年人只有 build a module from scratch 才能满足各方面的需求了。管它是什么 Python, 只要 &gt;= 3.6 应该就能用。(就算没装, 也能找到一大堆 Python 3 online 吧) 实在不行, 就去掉类型注解。我没有引入别的包。这个 module 也是非常草, 很草, 只有一些最基本的功能 (矩阵运算部分只写了乘法、逆及其相关, 加减都没有; 为了快速写出 code, 我用行列式求矩阵逆, 这注定慢, 之后有 chances 再作 improvements 算了)。</p>
<p>好了, 也不多说了, code 就 attached below 了。</p>
<pre><code class="language-python">class Matrix:
    def __init__(self, row: int, column: int):
        &quot;&quot;&quot;
        Initialization.
        &quot;&quot;&quot;
        self.__row: int = row
        self.__column: int = column
        self.__mat = [[0 for j in range(self.__column)]
                      for i in range(self.__row)]

    def __str__(self):
        &quot;&quot;&quot;
        Gives the string representation of the matrix.
        &quot;&quot;&quot;
        return self.__mat.__str__()

    def gets(self, rowIndex: int, columnIndex: int):
        &quot;&quot;&quot;
        Gets the (`rowIndex`, `columnIndex`)-entry.
        &quot;&quot;&quot;
        return self.__mat[rowIndex][columnIndex]

    def sets(self, element, rowIndex: int, columnIndex: int):
        &quot;&quot;&quot;
        Assigns the (`rowIndex`, `columnIndex`)-entry to be `element`.
        &quot;&quot;&quot;
        self.__mat[rowIndex][columnIndex] = element

    def rowNum(self) -&gt; int:
        &quot;&quot;&quot;
        Gives the number of rows.
        &quot;&quot;&quot;
        return self.__row

    def columnNum(self) -&gt; int:
        &quot;&quot;&quot;
        Gives the number of columns.
        &quot;&quot;&quot;
        return self.__column

    def transpose(self):
        &quot;&quot;&quot;
        Gives the transpose of the matrix.
        &quot;&quot;&quot;
        cn: int = self.rowNum()
        rn: int = self.columnNum()
        result = Matrix(rn, cn)
        for i in range(rn):
            for j in range(cn):
                result.sets(self.gets(j, i), i, j)
        return result

    def subMatrix(self, rowIndex: int, columnIndex: int):
        &quot;&quot;&quot;
        Returns the matrix obtained by removing entries row `rowIndex` and
        column `columnIndex`.
        &quot;&quot;&quot;
        rn: int = self.rowNum()
        cn: int = self.columnNum()
        if (rowIndex &gt;= rn or columnIndex &gt;= cn):
            raise Exception(&quot;at least one of the indices is out of bound&quot;)
        result = Matrix(rn - 1, cn - 1)
        for i in range(rn - 1):
            for j in range(cn - 1):
                ti: int = i if (i &lt; rowIndex) else i + 1
                tj: int = j if (j &lt; columnIndex) else j + 1
                result.sets(self.gets(ti, tj), i, j)
        return result

    def det(self):
        &quot;&quot;&quot;
        Gives the determinant: the (1, 1)-entry if the order of the square matrix is 1,
        `sum((-1) ^ j * a(0, j) * self.subMatrix(0, j).det(), 0 &lt;= j &lt; self.columnNum())`
        otherwise.
        &quot;&quot;&quot;
        rn: int = self.rowNum()
        cn: int = self.columnNum()
        if (rn != cn):
            raise Exception(&quot;Not a square matrix&quot;)
        if (cn == 1):
            return self.gets(0, 0)
        else:
            return sum([
                ((-1)**j) * self.gets(0, j) * self.subMatrix(0, j).det()
                for j in range(cn)
            ])

    def __adjoint(self):
        &quot;&quot;&quot;
        Gives the the classical adjoint: `[(-1) ^ (i + j) * self.subMatrix(j, i).det()]`.
        &quot;&quot;&quot;
        rn: int = self.rowNum()
        cn: int = self.columnNum()
        if (rn != cn):
            raise Exception(&quot;Not a square matrix&quot;)
        result = Matrix(rn, rn)
        if (rn == 1):
            result.sets(1, 0, 0)
        else:
            for i in range(rn):
                for j in range(rn):
                    result.sets(((-1)**(i + j)) * self.subMatrix(j, i).det(),
                                i, j)
        return result

    def inverse(self):
        &quot;&quot;&quot;
        Gives the inverse matrix: self.adjoint() / self.det()
        &quot;&quot;&quot;
        rn: int = self.rowNum()
        cn: int = self.columnNum()
        if (rn != cn):
            raise Exception(&quot;Not a square matrix&quot;)
        epsilon: float = 1e-5
        d = self.det()
        if (abs(d) &lt; epsilon):
            raise Exception(&quot;Not invertible&quot;)
        result = Matrix(rn, rn)
        adj = self.__adjoint()
        for i in range(rn):
            for j in range(rn):
                result.sets(adj.gets(i, j) / d, i, j)
        return result

    def toList(self) -&gt; list:
        return self.__mat

    def __mul__(self, other):
        &quot;&quot;&quot;
        Gives the product of `self` and `other`.
        &quot;&quot;&quot;
        rn: int = self.rowNum()
        cn: int = other.columnNum()
        if (self.columnNum() != other.rowNum()):
            raise Exception()
        s: int = self.columnNum()
        result = Matrix(rn, cn)
        for i in range(rn):
            for j in range(cn):
                result.sets(
                    sum([self.gets(i, k) * other.gets(k, j)
                         for k in range(s)]), i, j)
        return result

    @staticmethod
    def convertLists2Matrix(*ls: list):
        rn: int = len(ls)
        cn: int = len(ls[0])
        result = Matrix(rn, cn)
        for i in range(rn):
            for j in range(cn):
                result.sets(ls[i][j], i, j)
        return result


def leastsquares(y, *x):
    &quot;&quot;&quot;
    Gives the least-squares linear model of `y` and `x`:

    `y = beta_0 * x0 + beta_1 * x1 + ... beta_k * xk`

    Example 1:

        (x1,y1)=(0,20), (x2,y2)=(1,21)

    `print(leastsquares([20,21],ones(2),[0,1]))` gives `[20.0, 1.0]`, which meresult

    `y_hat = 20.0 * 1 + 1.0 * x`

    Example 2:

        (x11,x21,y1)=(0,0,3), (x12,x22,y2)=(0,1,8), (x13,x23,y3)=(1,0,7)

    `print(leastsquares([3,8,7],ones(3),[0,0,1],[0,1,0]))` gives `[3.0, 4.0, 5.0]`,
    which meresult

    `y_hat = 3.0 * 1 + 4.0 * x1 + 5.0 * x2`

    y: a list containing n numbers (the dependent variable).

    x: k+1 lists, each containing n numbers (the k+1 independent variables).
    &quot;&quot;&quot;
    length = len(y)
    for l in x:
        if len(l) != length:
            raise Exception(&quot;!!!&quot;)
    a = Matrix.convertLists2Matrix(*x).transpose()
    a_t = a.transpose()
    b = a_t * a
    rhs = Matrix.convertLists2Matrix(y).transpose()
    # Solves A'A * x = A' * RHS
    # x = inv(A'A) * (A' * RHS)
    return (b.inverse() * a_t * rhs).transpose().toList()[0]


def ones(n: int):
    &quot;&quot;&quot;
    Generates a list consisting of `n` ones.
    &quot;&quot;&quot;
    return [1 for i in range(n)]


def test() -&gt; None:
    &quot;&quot;&quot;
    This is a method used for testing and demonstrating the module.
    &quot;&quot;&quot;
    x = [0, 1, 2, 3, 4, 5, 6, 7]
    y = [0.5, 2, 3, 3.5, 5, 6, 7.5, 8.5]
    text1 = &quot;&quot;&quot;
Example 1: Suppose (xi,yi) (i=1,...,8) are:

    (0,0.5),(1,2),(2,3),(3,3.5),(4,5),(5,6),(6,7.5),(7,8.5)

Model: y=a+bx

y=a+bx can be seen as y=a*1+b*x. Hence

    x = {1}
    y = {2}
    print(leastsquares(y, ones(8), x))

generates

    {0}

which meresult

    y_hat = {0[0]} + {0[1]}x
&quot;&quot;&quot;.format(leastsquares(y, ones(8), x), x, y)
    x1 = [0.5, 1.2, 1.5, 1.8, 2, 2.2, 2.5, 3]
    x2 = [1, 1.5, 2, 3, 3.5, 5, 6.5, 8]
    y = [1, 2.5, 3, 4.5, 5, 6.5, 7.5, 9]
    text2 = &quot;&quot;&quot;
Example 2: Suppose (x1i,x2i,yi) (i=1,...,8) are:

    (0.5,1,1),(1.2,1.5,2.5),(1.5,2,3),(1.8,3,4.5),(2,3.5,5),(2.2,5,6.5),(2.5,6.5,7.5),(3,8,9)

Model: y=a*x1+b*x2 (Notice: no constant term here!)

Hence

    x1 = {2}
    x2 = {3}
    y = {4}
    print(leastsquares(y, x1, x2))

generates

    {0}

which meresult

    y_hat = {0[0]}x1 + {0[1]}x2

However, if the model y=c+ax1+bx2 is used instead, then ones(8) must be used:

    x1 = {2}
    x2 = {3}
    y = {4}
    print(leastsquares(y, ones(8), x1, x2))

generates

    {1}

which meresult

    y_hat = {1[0]} + {1[1]}x1 + {1[2]}x2

&quot;&quot;&quot;.format(leastsquares(y, x1, x2), leastsquares(y, ones(8), x1, x2), x1, x2,
           y)
    text = text1 + text2
    print(text)


if __name__ == &quot;__main__&quot;:
    test()

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Untitled 0000]]></title>
        <id>https://septsea.github.io/post/untitled-0000/</id>
        <link href="https://septsea.github.io/post/untitled-0000/">
        </link>
        <updated>2020-03-27T07:36:05.000Z</updated>
        <content type="html"><![CDATA[<p>老年人又来水 video 了。</p>
<p>嗯, 仍然是个根式化简题。为什么又做这样的 video 呢? 实在是因为没东西可做了。</p>
<p>明明周一至周五都有课, 可是我真把这日子过成老年生活了。</p>
<p>什么提高班、社团等, 都没去。也不想去。</p>
<p>7:00 ~ 21:30。之前我 9 点睡。</p>
<p>彳亍口巴。视频仍然叫 Untitled。</p>
<p>嗯。现在的视频的编号应该使用 BV number。之前在别的地方搞 advertisement, 形如 avXXXXXXXXX 的表达很容易让人误会。</p>
<p>很明显, AV 是 audio &amp; video 嘛(#`O′)。</p>
<p>我是青结工。以后就不在我自己的 moments 等地方打广告了。反正没人看。我也懒得用 Programming languages 制作 animations。</p>
<p>她应该康不到 (我没 blacklist 任何人)。她应该也不想康。也不好意思打扰她。</p>
<p>以后就不发原创视频了。准确点说, 就算是自制我也会投转载。coins 不重要了。随缘吧。</p>
<p>视频应该会等一段时间吧。哈哈。等它就好。</p>
<p>害。不多说了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[水 (0008)]]></title>
        <id>https://septsea.github.io/post/shui-0008/</id>
        <link href="https://septsea.github.io/post/shui-0008/">
        </link>
        <updated>2020-02-02T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>我想休息 e 下了。</p>
<p>今日有二道水题。逻辑解法可以分享呀!</p>
<p>问 1. 设一个正整数 N 至少有二种方式表示为二个正整数的立方的和, 求 N 的最小值。</p>
<p>答. 1729。1729 = 9^3 + 10^3 = 1^3 + 12^3。</p>
<p>值得一提的是, 如果削除 &quot;二个正整数的立方的和&quot; 的 &quot;正&quot; 字, 那么 (表面上) 就有 aaa - bbb = ccc - ddd 与 aaa + bbb = ccc - ddd 二种形式, 实则只有仅有后者是新问题, 前者仍为问 1。这激发了问 2:</p>
<p>问 2. 设一个正整数 N 的立方可以写为二个正整数的立方的和 + 非负整数的立方, 求 N 的最小值。</p>
<p>答. 6。6^3 = 3^3 + 4^3 + 5^3。</p>
<p>所以, 下面的问 1' 的答案就是 91 (= 6^3 + (-5)^3 = 3^3 + 4^3):</p>
<p>问 1'. 设一个正整数 N 至少有二种方式表示为二个整数的立方的和, 求 N 的最小值。</p>
<p>问 1:</p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_68
 */
public class Pr_68 {

    final static public void main(final String... args) {
        new MathPuzzle() {

            @Override
            public void solve() {
                int smallest = 1;
                while (true) {
                    if (this.hasMultiple(smallest)) {
                        this.findsAllExpressions(smallest);
                        break;
                    } else {
                        smallest++;
                    }
                }
            }

            public boolean hasMultiple(final int n) {
                // Checks whether there are &gt;= 2 ways to express n as the sum of two cubes
                int counter = 0;
                int b = 1;
                while (true) {
                    for (int a = 1; a &lt;= b; a++) {
                        if (a * a * a + b * b * b == n) {
                            counter++;
                        }
                    }
                    if (counter &gt; 1) {
                        return true;
                    }
                    if (b * b * b &lt;= n) {
                        b++;
                    } else {
                        break;
                    }
                }
                return false;
            }

            public void findsAllExpressions(final int n) {
                int counter = 0;
                int b = 1;
                while (true) {
                    for (int a = 1; a &lt;= b; a++) {
                        if (a * a * a + b * b * b == n) {
                            counter++;
                            System.out.println(String.format(&quot;%d ^ 3 + %d ^ 3 = %d&quot;, a, b, n));
                        }
                    }
                    if (b * b * b &lt;= n) {
                        b++;
                    } else {
                        break;
                    }
                }
                if (counter &lt; 2) {
                    System.out.println(String.format(&quot;\nThere is %d way.&quot;, counter));
                } else {
                    System.out.println(String.format(&quot;\nThere are %d ways.&quot;, counter));
                }
            }

        }.execute();
    }

}

</code></pre>
<p>问 2:</p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_69
 */
public class Pr_69 {

    final static public void main(final String... args) {
        new MathPuzzle() {

            @Override
            public void solve() {
                // i1^3 + i2^3 + i3^3 = l^3
                // i1 &gt;= 0, i2, i3 &gt;= 1, l is an integer
                // i1 &lt;= i2 &lt;= i3
                int l = 1;
                while (true) {
                    if (this.is3Cubes(l * l * l)) {
                        System.out.println(String.format(&quot;%d = %d ^ 3&quot;, l * l * l, l));
                        this.expressesItAs3Cubes(l * l * l);
                        break;
                    } else {
                        l++;
                    }
                }
            }

            public int int_curt(final int n) {
                // If there exists a positive INTEGER l such that l^3 = n, it returns l
                // Otherwise, it returns -1
                int l = 0;
                while (true) {
                    if (l * l * l &gt; n) {
                        break;
                    }
                    if (l * l * l == n) {
                        return l;
                    }
                    l++;
                }
                return -1;
            }

            public boolean is3Cubes(final int n) {
                // Checks whether there exist 3 integers
                // 0 &lt;= i1, 1 &lt; i2, 1 &lt; i3, i1 &lt;= i2 &lt;= i3
                // such that n = i1^3 + i2^3 + i3^3
                int i3 = -1;
                for (int i1 = 0; i1 * i1 * i1 &lt;= n; i1++) {
                    for (int i2 = 1; i2 * i2 * i2 &lt;= n; i2++) {
                        if (i1 &gt; i2) {
                            continue;
                        }
                        if (n &lt;= i1 * i1 * i1 + i2 * i2 * i2) {
                            continue;
                        }
                        i3 = this.int_curt(n - i1 * i1 * i1 - i2 * i2 * i2);
                        // If i3 &gt;= i2, of course i3 != -1
                        if (i3 &gt;= i2) {
                            return true;
                        }
                    }
                }
                return false;
            }

            public void expressesItAs3Cubes(final int n) {
                int i3 = -1;
                for (int i1 = 0; i1 * i1 * i1 &lt;= n; i1++) {
                    for (int i2 = 1; i2 * i2 * i2 &lt;= n; i2++) {
                        if (i1 &gt; i2) {
                            continue;
                        }
                        if (n &lt;= i1 * i1 * i1 + i2 * i2 * i2) {
                            continue;
                        }
                        i3 = this.int_curt(n - i1 * i1 * i1 - i2 * i2 * i2);
                        if (i3 &gt;= i2) {
                            System.out.println(String.format(&quot;%d = %d ^ 3 + %d ^ 3 + %d ^ 3&quot;, n, i1, i2, i3));
                        }
                    }
                }
            }

        }.execute();
    }

}

</code></pre>
<p>就这样。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[水 (0007)]]></title>
        <id>https://septsea.github.io/post/shui-0007/</id>
        <link href="https://septsea.github.io/post/shui-0007/">
        </link>
        <updated>2020-02-01T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>今日有二道水题。逻辑解法可以分享呀!</p>
<p>问 1. A ~ J 代表数字 0 ~ 9, 且任意二个字母代表不同的数字。解方程</p>
<p>ABCDE / FGHIJ = 9</p>
<p>注意, ABCDE 与 FGHIJ 不一定是 5 位数。</p>
<p>答. 57429 / 06381 = 9, 58239 / 06471 = 9, 75249 / 08361 = 9, 95742 / 10638 = 9, 95823 / 10647 = 9, 97524 / 10836 = 9。</p>
<p>问 2. E, V, D, I, T, A, L, K 代表数字 0 ~ 9, 且任意二个字母代表不同的数字, 且 E, D &gt; 0。解方程</p>
<p>EVE / DID = 0.TALKTALKTALK... (无限循环小数)</p>
<p>答. 212 / 606 = 0.3498..., 242 / 303 = 0.7986...。</p>
<p>问 1:</p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_66
 */
public class Pr_66 {

    public static void main(final String... args) {
        final MathPuzzle m = () -&gt; {
            // ABCDE / FGHIJ = 9
            // =&gt; ABCDE = 9 * FGHIJ
            int counter = 0;
            final int[][] perms = MathPuzzle.permutations(10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            for (final int[] p : perms) {
                final int n1 = 10000 * p[0] + 1000 * p[1] + 100 * p[2] + 10 * p[3] + p[4];
                final int n2 = 10000 * p[5] + 1000 * p[6] + 100 * p[7] + 10 * p[8] + p[9];
                // Convert int[] to Object[]
                final Object[] q = new Object[10];
                for (int i = 0; i &lt; 10; i++) {
                    q[i] = p[i];
                }
                if (n1 == 9 * n2) {
                    counter++;
                    System.out.println(String.format(&quot;%d%d%d%d%d / %d%d%d%d%d = 9&quot;, q));
                }
            }
            if (counter &lt; 2) {
                System.out.println(String.format(&quot;\nThere is %d solution.&quot;, counter));
            } else {
                System.out.println(String.format(&quot;\nThere are %d solutions.&quot;, counter));
            }
        };
        m.execute();
    }

}

</code></pre>
<p>问 2:</p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_67
 */
public class Pr_67 {

    final static public void main(final String... args) {
        ((MathPuzzle) () -&gt; {
            // EVE / DID = 0.TALKTALKTALK...
            // =&gt; EVE / DID = TALK / 9999
            // =&gt; EVE * 9999 = DID * TALK
            // E, V, D, I; T, A, L, K
            int counter = 0;
            final int[][] perms = MathPuzzle.permutations(8, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            for (final int[] p : perms) {
                if (p[0] == 0) {
                    continue;
                }
                if (p[2] == 0) {
                    continue;
                }
                final int n1 = 101 * p[0] + 10 * p[1];
                final int n2 = 101 * p[2] + 10 * p[3];
                final int n3 = 1000 * p[4] + 100 * p[5] + 10 * p[6] + p[7];
                final Object[] q = { n1, n2, p[4], p[5], p[6], p[7] };
                if (n1 * 9999 == n2 * n3) {
                    counter++;
                    System.out.println(String.format(&quot;%d / %d = 0.%d%d%d%d...&quot;, q));
                }
            }
            if (counter &lt; 2) {
                System.out.println(String.format(&quot;\nThere is %d solution.&quot;, counter));
            } else {
                System.out.println(String.format(&quot;\nThere are %d solutions.&quot;, counter));
            }
        }).execute();
    }

}

</code></pre>
<p>就这样。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[水 (0006)]]></title>
        <id>https://septsea.github.io/post/shui-0006/</id>
        <link href="https://septsea.github.io/post/shui-0006/">
        </link>
        <updated>2020-01-31T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>今日的水题有一点点独特的地方:</p>
<p>ONE + TWO + TWO + THREE + THREE = ELEVEN</p>
<p>各个字母自然是 0~9 之间的数, O, E, T 不为 0, 且一个数字至多替换一个字母。</p>
<p>如果您愿意看 e 下这个表达式, 并且您愿意看 English, you will realize that this is actually an example of the so-called &quot;double true cryptarithms&quot;, which are alphametics where the letters spell the words describing numbers so that the actual wording is also true.</p>
<p>答. 391 + 803 + 803 + 84611 + 84611 = 171219。</p>
<p>MathPuzzle 自然是昨日用剩的接口。</p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_65
 */
public class Pr_65 {

    final static public void main(final String... args) {
        ((MathPuzzle) () -&gt; {
            // ONE + TWO + TWO + THREE + THREE = ELEVEN
            // O, N, E; T, W; H, R; L, V: 0~9
            // O, E, T &gt; 0
            int counter = 0;
            final int[][] perms = MathPuzzle.permutations(9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            for (final int[] p : perms) {
                if (p[0] == 0) {
                    continue;
                }
                if (p[2] == 0) {
                    continue;
                }
                if (p[3] == 0) {
                    continue;
                }
                final int n1 = 100 * p[0] + 10 * p[1] + p[2];
                final int n2 = 100 * p[3] + 10 * p[4] + p[0];
                final int n3 = 10000 * p[3] + 1000 * p[5] + 100 * p[6] + 11 * p[2];
                final int n4 = 101010 * p[2] + 10000 * p[7] + 100 * p[8] + p[1];
                if (n1 + n2 * 2 + n3 * 2 == n4) {
                    counter++;
                    System.out.println(String.format(&quot;%d + %d + %d + %d + %d = %d&quot;, n1, n2, n2, n3, n3, n4));
                }
            }
            if (counter &lt; 2) {
                System.out.println(String.format(&quot;\nThere is %d solution.&quot;, counter));
            } else {
                System.out.println(String.format(&quot;\nThere are %d solutions.&quot;, counter));
            }
        }).execute();
    }

}

</code></pre>
<p>就这样吧, 谢谢。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[水 (0005)]]></title>
        <id>https://septsea.github.io/post/shui-0005/</id>
        <link href="https://septsea.github.io/post/shui-0005/">
        </link>
        <updated>2020-01-30T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>今日的水题跟武汉有一点关系:</p>
<p>JIA * YOU = WU * HAN</p>
<p>每个字母代表 1~9 的数字, 任意二个不同的字母代表不同的数字, 且 WU * HAN 的结果 (自然是十进制) 不含 0。</p>
<p>答. 123 * 564 = 94 * 738 = 69372。</p>
<p>以后我就写一个语言 (Java) 的代码好了, 毕竟它快, 而且比 C/C++ 容易。</p>
<p>代码在老地方。根据反馈, 想看的自然知道去哪儿看, 不想看的摆在哪儿也不会看。</p>
<p>欢迎交流 tricks。</p>
<p>其实本来是今日写完后明日休息, 但假期还有三日呀。那我就再写三日吧。</p>
<p>首先我们写一个接口。我昨日花了点时间写了个接口。毕竟每次都那么多代码, 看着也累。</p>
<pre><code class="language-java">package math_puzzle;

/**
 * MathPuzzle
 */
@FunctionalInterface
public interface MathPuzzle {

    /**
     * The executor of the mathematical puzzle.
     */
    public default void execute() {
        long time = 0;
        time = System.currentTimeMillis();
        System.out.println(&quot;&quot;);
        this.solve();
        time = System.currentTimeMillis() - time;
        System.out.println(String.format(&quot;\nTime elapsed: %d millisecond&quot;, time) + (time &lt; 2 ? &quot;&quot; : &quot;s&quot;) + &quot;.\n&quot;);
    }

    /**
     * The solver to be implemented.
     */
    public void solve();

    /**
     * Returns the factorial of an {@code int} value.
     * 
     * @param n the argument whose factorial is to be determined.
     * @return the absolute value of the argument.
     */
    public static int factorial(final int n) {
        int result = 1;
        if (n &gt; 1) {
            for (int i = 2; i &lt;= n; i++) {
                result *= i;
            }
        }
        return result;
    }

    /**
     * Returns the permutations of r integers taken from {@code int[] numbers}. If r
     * &gt; l = {@code numbers.length} or r &lt; 0, then an empty array is returned.
     * 
     * @param r       the length of the permutation.
     * @param numbers the integers to be taken from.
     * @return the permutations of r integers taken from {@code int[] numbers}.
     */
    public static int[][] permutations(final int r, final int... numbers) {
        final int l = numbers.length;
        if (r &gt; l || r &lt; 0) {
            return new int[][] {};
        } else if (r == 0) {
            return new int[][] { {} };
        } else if (r == 1) {
            final int[][] result = new int[l][1];
            for (int i = 0; i &lt; l; i++) {
                result[i][0] = numbers[i];
            }
            return result;
        } else {
            final int[][] result = new int[MathPuzzle.factorial(l) / MathPuzzle.factorial(l - r)][r];
            int counter = 0;
            for (int i = 0; i &lt; l; i++) {
                final int[] temp = new int[l - 1];
                for (int j = 0; j &lt; l; j++) {
                    if (j &lt; i) {
                        temp[j] = numbers[j];
                    } else if (j &gt; i) {
                        temp[j - 1] = numbers[j];
                    }
                }
                final int[][] temp_perms = MathPuzzle.permutations(r - 1, temp);
                for (final int[] temp_perm : temp_perms) {
                    result[counter][0] = numbers[i];
                    for (int j = 0; j &lt; r - 1; j++) {
                        result[counter][j + 1] = temp_perm[j];
                    }
                    counter++;
                }
            }
            return result;
        }
    }

}

</code></pre>
<p>然后, 解题:</p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_64
 */
public class Pr_64 {

    final static public void main(final String... args) {
        // There is only one method to be implemented, so lambda expressions are OK.
        ((MathPuzzle) () -&gt; {
            // JIA * YOU = WU * HAN
            // J, I, A, Y, O, U; W, H, N: 1~9
            // The condition that the result of WU * HAN not contain 0
            // is temporarily ignored.
            int counter = 0;
            final int[][] perms = MathPuzzle.permutations(9, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            for (final int[] p : perms) {
                final int n1 = 100 * p[0] + 10 * p[1] + p[2];
                final int n2 = 100 * p[3] + 10 * p[4] + p[5];
                final int n3 = 10 * p[6] + p[5];
                final int n4 = 100 * p[7] + 10 * p[2] + p[8];
                if (n1 * n2 == n3 * n4) {
                    counter++;
                    System.out.println(String.format(&quot;%d * %d = %d * %d = %d&quot;, n1, n2, n3, n4, n1 * n2));
                }
            }
            if (counter &lt; 2) {
                System.out.println(String.format(&quot;\nThere is %d solution.&quot;, counter));
            } else {
                System.out.println(String.format(&quot;\nThere are %d solutions.&quot;, counter));
            }
        }).execute();
    }

}

</code></pre>
<p>Output:</p>
<pre><code class="language-java">
123 * 564 = 94 * 738 = 69372
374 * 215 = 85 * 946 = 80410

There are 2 solutions.

Time elapsed: 151 milliseconds.

</code></pre>
<p>显然第二个应当舍弃。所以只有第一个符合要求了。</p>
<p>就这样了, 谢谢大家的阅读。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[因式分解]]></title>
        <id>https://septsea.github.io/post/yin-shi-fen-jie/</id>
        <link href="https://septsea.github.io/post/yin-shi-fen-jie/">
        </link>
        <updated>2020-01-29T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>正月初五! 新年快乐呀!</p>
<p>求正整数 A, B (WLOG, 设 A &lt;= B) 使得 xx + Ax + B 与 xx + Bx + A 都能在整数范围内因式分解。</p>
<p>Case 1. A = B</p>
<p>当 A 是偶数 2k 时, xx + 2kx + 2k = (x + k)^2 - ((k - 1)^2 - 1), 只要 (k - 1)^2 - 1 可以写为 l^2 (l 为整数), 就可以在整数范围内因式分解了。由 (k - 1)^2 - 1 = l^2 可知 (k+l-1)(k-l-1) = 1, 所以必有 k+l-1 = k-l-1 = 1 or -1, 从而得到 k = 2 or 0, l = 0。从而 A = B = 0 (舍弃) or A = B = 4。</p>
<p>当 A 是奇数 2k+1 时, xx + (2k+1)x + (2k+1) = (x + (2k+1)/2)^2 - ((k-1/2)^2 - 1), 只要 (k-1/2)^2 - 1 可以写为 (l-1/2)^2 (l 为整数), 就可以在整数范围内因式分解了。由 (k-1/2)^2 - 1 = (l-1/2)^2 可知 (k - l)(k + l - 1) = 1, 所以必有 k - l = k + l - 1 = 1 or -1, 从而可得 1 = 2l, a contradiction!</p>
<p>综上, (A, B) = (4, 4)。</p>
<p>Case 2. A &lt; B</p>
<p>设 (x+r)(x+s) = xx + Ax + B, r &lt;= s;</p>
<p>设 (x+u)(x+v) = xx + Bx + A, u &lt;= v。</p>
<p>也就是 A = uv = r+s, B = u+v = rs, 从而 uv &lt; u+v, rs &gt; r+s。</p>
<p>因 u, v, r, s &gt; 0, 从而 1 &lt; 1/u + 1/v &lt;= 2/u, 1 &gt; 1/r + 1/s &gt;= 2/s, 也就是 u &lt; 2, s &gt; 2, 从而 u = 1, s &gt;= 3。</p>
<p>从而 1+r+s = rs, 那么 (r-1)(s-1) = 2。</p>
<p>s-1 &gt;= 2, 从而 s-1 = 2, r-1 = 1。也就是 A = 3+2 = 5, B = 3*2 = 6。</p>
<p>(A, B) 的另一个解为 (5, 6)。</p>
<p>综上, (A, B) = (4, 4) or (5, 6)。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[水 (0004)]]></title>
        <id>https://septsea.github.io/post/shui-0004/</id>
        <link href="https://septsea.github.io/post/shui-0004/">
        </link>
        <updated>2020-01-28T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>正月初四! 新年快乐呀!</p>
<p>好了, 今天我们再来看一个题。</p>
<p>已知 4 位数 KING 与 6 位数 KNIGHT 都是完全平方数, 且任意二个字母代表不同的数字。求这二个数。</p>
<p>首先, sqrt KING 至少是 32, sqrt KNIGHT 至少是 317。</p>
<p>一个一个找吧! 这真巧! 至少对我来说是这样的。</p>
<p>有什么好办法一定要告诉我呀。</p>
<p>答案: KING = 3721, KNIGHT = 327184。</p>
<p>Python:</p>
<pre><code class="language-python">from time import time
from math import ceil


def main(*args) -&gt; None:
    t: float = 0
    t = time()
    print(&quot;&quot;)
    solve()
    t = time() - t
    ms: int = ceil(1000 * t)
    print(&quot;\nTime elapsed: &quot; + str(ms) + &quot; millisecond&quot; +
          (&quot;&quot; if ms &lt; 2 else &quot;s&quot;) + &quot;.\n&quot;)


def isDistinct(*elements) -&gt; bool:
    l: int = len(elements)
    for i in range(0, l - 1):
        for j in range(i + 1, l):
            if (elements[i] == elements[j]):
                return False
    return True


def int_sqrt(n: int) -&gt; int:
    # If there exists a positive INTEGER l such that l^2 = n, it returns l
    # Otherwise, it returns -1
    l: int = 0
    while (&quot;&quot;&quot;
    I do not love bilibili
    if hills.height == 0
    and river.water == 0
    and 1 / winter.thunder &lt; 1e-9
    and summer.rain_and_snow &gt; 0
    and ceiling.height == floor.height
    &quot;&quot;&quot;):
        if (l * l &gt; n):
            break
        if (l * l == n):
            return l
        l += 1
    return -1


def solve() -&gt; None:
    # Both KING and KNIGHT are perfect squares
    counter: int = 0
    # i1 stands for K, which is not zero
    for i1 in range(1, 10):
        for i2 in range(0, 10):
            for i3 in range(0, 10):
                for i4 in range(0, 10):
                    for i5 in range(0, 10):
                        for i6 in range(0, 10):
                            # Checks whether the numbers are distinct
                            if (not isDistinct(i1, i2, i3, i4, i5, i6)):
                                continue
                            if (int_sqrt(1000 * i1 + 100 * i2 + 10 * i3 + i4) != -1 and int_sqrt(100000 * i1 + 10000 * i3 + 1000 * i2 + 100 * i4 + 10 * i5 + i6) != -1):
                                counter += 1
                                print(&quot;%d%d%d%d    %d%d%d%d%d%d&quot; %
                                      (i1, i2, i3, i4, i1, i3, i2, i4, i5, i6))
    if (counter &lt; 2):
        print(&quot;\nThere is %d solution.&quot; % (counter))
    else:
        print(&quot;\nThere are %d solutions.&quot; % (counter))


if __name__ == &quot;__main__&quot;:
    main()

</code></pre>
<p>Python Output:</p>
<pre><code class="language-python">
3721    327184

There is 1 solution.

Time elapsed: 3165 milliseconds.

</code></pre>
<p>Java:</p>
<p><em>Package name</em>: <code>math_puzzle</code>; <em>File name</em>: <code>Pr_4.java</code></p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_4
 */
public class Pr_4 {

    public static void main(final String... args) {
        long time = 0;
        time = System.currentTimeMillis();
        System.out.println(&quot;&quot;);
        Pr_4.solve();
        time = System.currentTimeMillis() - time;
        System.out.println(String.format(&quot;\nTime elapsed: %d millisecond&quot;, time) + (time &lt; 2 ? &quot;&quot; : &quot;s&quot;) + &quot;.\n&quot;);
    }

    public static boolean isDistinct(final int... elements) {
        final int l = elements.length;
        for (int i = 0; i &lt; l - 1; i++) {
            for (int j = i + 1; j &lt; l; j++) {
                if (elements[i] == elements[j]) {
                    return false;
                }
            }
        }
        return true;
    }

    public static int int_sqrt(final int n) {
        // If there exists an INTEGER l such that l^2 = n, it returns l
        // Otherwise, it returns -1
        int l = 0;
        while (true) {
            if (l * l &gt; n) {
                break;
            }
            if (l * l == n) {
                return l;
            }
            l++;
        }
        return -1;
    }

    public static void solve() {
        // Both KING and KNIGHT are perfect squares
        int counter = 0;
        // i1 stands for K, which is not zero
        for (int i1 = 1; i1 &lt; 10; i1++) {
            for (int i2 = 0; i2 &lt; 10; i2++) {
                for (int i3 = 0; i3 &lt; 10; i3++) {
                    for (int i4 = 0; i4 &lt; 10; i4++) {
                        for (int i5 = 0; i5 &lt; 10; i5++) {
                            for (int i6 = 0; i6 &lt; 10; i6++) {
                                // Checks whether the numbers are distinct
                                if (!Pr_4.isDistinct(i1, i2, i3, i4, i5, i6)) {
                                    continue;
                                }
                                if (Pr_4.int_sqrt(1000 * i1 + 100 * i2 + 10 * i3 + i4) != -1 &amp;&amp; Pr_4.int_sqrt(
                                        100000 * i1 + 10000 * i3 + 1000 * i2 + 100 * i4 + 10 * i5 + i6) != -1) {
                                    counter++;
                                    System.out.println(String.format(&quot;%d%d%d%d    %d%d%d%d%d%d&quot;, i1, i2, i3, i4, i1, i3,
                                            i2, i4, i5, i6));
                                }
                            }
                        }
                    }
                }

            }
        }
        if (counter &lt; 2) {
            System.out.println(String.format(&quot;\nThere is %d solution.&quot;, counter));
        } else {
            System.out.println(String.format(&quot;\nThere are %d solutions.&quot;, counter));
        }
    }

}

</code></pre>
<p>Java Output:</p>
<pre><code class="language-java">
3721    327184

There is 1 solution.

Time elapsed: 67 milliseconds.

</code></pre>
<p>JavaScript:</p>
<pre><code class="language-javascript">&quot;use strict&quot;;

function main() {
    let args = [];
    for (let _i = 0; _i &lt; arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    let time = 0;
    time = (new Date()).valueOf();
    console.log(&quot;&quot;);
    solve();
    time = (new Date()).valueOf() - time;
    console.log(`\nTime elapsed: ${time} millisecond` + (time &lt; 2 ? &quot;&quot; : &quot;s&quot;) + &quot;.\n&quot;);
}

function isDistinct() {
    let elements = [];
    for (let _i = 0; _i &lt; arguments.length; _i++) {
        elements[_i] = arguments[_i];
    }
    let l = elements.length;
    for (let i = 0; i &lt; l - 1; i++) {
        for (let j = i + 1; j &lt; l; j++) {
            if (elements[i] === elements[j]) {
                return false;
            }
        }
    }
    return true;
}

function int_sqrt(n) {
    // If there exists an INTEGER l such that l^2 = n, it returns l
    // Otherwise, it returns -1
    let l = 0;
    while (true) {
        if (l * l &gt; n) {
            break;
        }
        if (l * l === n) {
            return l;
        }
        l++;
    }
    return -1;
}

function solve() {
    // Both KING and KNIGHT are perfect squares
    let counter = 0;
    // i1 stands for K, which is not zero
    for (let i1 = 1; i1 &lt; 10; i1++) {
        for (let i2 = 0; i2 &lt; 10; i2++) {
            for (let i3 = 0; i3 &lt; 10; i3++) {
                for (let i4 = 0; i4 &lt; 10; i4++) {
                    for (let i5 = 0; i5 &lt; 10; i5++) {
                        for (let i6 = 0; i6 &lt; 10; i6++) {
                            // Checks whether the numbers are distinct
                            if (!isDistinct(i1, i2, i3, i4, i5, i6)) {
                                continue;
                            }
                            if (int_sqrt(1000 * i1 + 100 * i2 + 10 * i3 + i4) !== -1 &amp;&amp; int_sqrt(100000 * i1 + 10000 * i3 + 1000 * i2 + 100 * i4 + 10 * i5 + i6) !== -1) {
                                counter++;
                                console.log(`${i1}${i2}${i3}${i4}    ${i1}${i3}${i2}${i4}${i5}${i6}`);
                            }
                        }
                    }
                }
            }
        }
    }
    if (counter &lt; 2) {
        console.log(`\nThere is ${counter} solution.`);
    }
    else {
        console.log(`\nThere are ${counter} solutions.`);
    }
}

main();

</code></pre>
<p>JavaScript Output:</p>
<pre><code class="language-javascript">
3721    327184

There is 1 solution.

Time elapsed: 125 milliseconds.

</code></pre>
]]></content>
    </entry>
</feed>
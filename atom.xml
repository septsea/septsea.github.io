<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://septsea.github.io/</id>
    <title>septsea</title>
    <updated>2020-03-05T10:05:05.199Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://septsea.github.io/"/>
    <link rel="self" href="https://septsea.github.io/atom.xml"/>
    <subtitle>This is septsea&apos;s website.</subtitle>
    <logo>https://septsea.github.io/images/avatar.png</logo>
    <icon>https://septsea.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, septsea</rights>
    <entry>
        <title type="html"><![CDATA[水 (0008)]]></title>
        <id>https://septsea.github.io/post/shui-0008/</id>
        <link href="https://septsea.github.io/post/shui-0008/">
        </link>
        <updated>2020-02-02T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>我想休息 e 下了。</p>
<p>今日有二道水题。逻辑解法可以分享呀!</p>
<p>问 1. 设一个正整数 N 至少有二种方式表示为二个正整数的立方的和, 求 N 的最小值。</p>
<p>答. 1729。1729 = 9^3 + 10^3 = 1^3 + 12^3。</p>
<p>值得一提的是, 如果削除 &quot;二个正整数的立方的和&quot; 的 &quot;正&quot; 字, 那么 (表面上) 就有 aaa - bbb = ccc - ddd 与 aaa + bbb = ccc - ddd 二种形式, 实则只有仅有后者是新问题, 前者仍为问 1。这激发了问 2:</p>
<p>问 2. 设一个正整数 N 的立方可以写为二个正整数的立方的和 + 非负整数的立方, 求 N 的最小值。</p>
<p>答. 6。6^3 = 3^3 + 4^3 + 5^3。</p>
<p>所以, 下面的问 1' 的答案就是 91 (= 6^3 + (-5)^3 = 3^3 + 4^3):</p>
<p>问 1'. 设一个正整数 N 至少有二种方式表示为二个整数的立方的和, 求 N 的最小值。</p>
<p>问 1:</p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_68
 */
public class Pr_68 {

    final static public void main(final String... args) {
        new MathPuzzle() {

            @Override
            public void solve() {
                int smallest = 1;
                while (true) {
                    if (this.hasMultiple(smallest)) {
                        this.findsAllExpressions(smallest);
                        break;
                    } else {
                        smallest++;
                    }
                }
            }

            public boolean hasMultiple(final int n) {
                // Checks whether there are &gt;= 2 ways to express n as the sum of two cubes
                int counter = 0;
                int b = 1;
                while (true) {
                    for (int a = 1; a &lt;= b; a++) {
                        if (a * a * a + b * b * b == n) {
                            counter++;
                        }
                    }
                    if (counter &gt; 1) {
                        return true;
                    }
                    if (b * b * b &lt;= n) {
                        b++;
                    } else {
                        break;
                    }
                }
                return false;
            }

            public void findsAllExpressions(final int n) {
                int counter = 0;
                int b = 1;
                while (true) {
                    for (int a = 1; a &lt;= b; a++) {
                        if (a * a * a + b * b * b == n) {
                            counter++;
                            System.out.println(String.format(&quot;%d ^ 3 + %d ^ 3 = %d&quot;, a, b, n));
                        }
                    }
                    if (b * b * b &lt;= n) {
                        b++;
                    } else {
                        break;
                    }
                }
                if (counter &lt; 2) {
                    System.out.println(String.format(&quot;\nThere is %d way.&quot;, counter));
                } else {
                    System.out.println(String.format(&quot;\nThere are %d ways.&quot;, counter));
                }
            }

        }.execute();
    }

}

</code></pre>
<p>问 2:</p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_69
 */
public class Pr_69 {

    final static public void main(final String... args) {
        new MathPuzzle() {

            @Override
            public void solve() {
                // i1^3 + i2^3 + i3^3 = l^3
                // i1 &gt;= 0, i2, i3 &gt;= 1, l is an integer
                // i1 &lt;= i2 &lt;= i3
                int l = 1;
                while (true) {
                    if (this.is3Cubes(l * l * l)) {
                        System.out.println(String.format(&quot;%d = %d ^ 3&quot;, l * l * l, l));
                        this.expressesItAs3Cubes(l * l * l);
                        break;
                    } else {
                        l++;
                    }
                }
            }

            public int int_curt(final int n) {
                // If there exists a positive INTEGER l such that l^3 = n, it returns l
                // Otherwise, it returns -1
                int l = 0;
                while (true) {
                    if (l * l * l &gt; n) {
                        break;
                    }
                    if (l * l * l == n) {
                        return l;
                    }
                    l++;
                }
                return -1;
            }

            public boolean is3Cubes(final int n) {
                // Checks whether there exist 3 integers
                // 0 &lt;= i1, 1 &lt; i2, 1 &lt; i3, i1 &lt;= i2 &lt;= i3
                // such that n = i1^3 + i2^3 + i3^3
                int i3 = -1;
                for (int i1 = 0; i1 * i1 * i1 &lt;= n; i1++) {
                    for (int i2 = 1; i2 * i2 * i2 &lt;= n; i2++) {
                        if (i1 &gt; i2) {
                            continue;
                        }
                        if (n &lt;= i1 * i1 * i1 + i2 * i2 * i2) {
                            continue;
                        }
                        i3 = this.int_curt(n - i1 * i1 * i1 - i2 * i2 * i2);
                        // If i3 &gt;= i2, of course i3 != -1
                        if (i3 &gt;= i2) {
                            return true;
                        }
                    }
                }
                return false;
            }

            public void expressesItAs3Cubes(final int n) {
                int i3 = -1;
                for (int i1 = 0; i1 * i1 * i1 &lt;= n; i1++) {
                    for (int i2 = 1; i2 * i2 * i2 &lt;= n; i2++) {
                        if (i1 &gt; i2) {
                            continue;
                        }
                        if (n &lt;= i1 * i1 * i1 + i2 * i2 * i2) {
                            continue;
                        }
                        i3 = this.int_curt(n - i1 * i1 * i1 - i2 * i2 * i2);
                        if (i3 &gt;= i2) {
                            System.out.println(String.format(&quot;%d = %d ^ 3 + %d ^ 3 + %d ^ 3&quot;, n, i1, i2, i3));
                        }
                    }
                }
            }

        }.execute();
    }

}

</code></pre>
<p>就这样。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[水 (0007)]]></title>
        <id>https://septsea.github.io/post/shui-0007/</id>
        <link href="https://septsea.github.io/post/shui-0007/">
        </link>
        <updated>2020-02-01T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>今日有二道水题。逻辑解法可以分享呀!</p>
<p>问 1. A ~ J 代表数字 0 ~ 9, 且任意二个字母代表不同的数字。解方程</p>
<p>ABCDE / FGHIJ = 9</p>
<p>注意, ABCDE 与 FGHIJ 不一定是 5 位数。</p>
<p>答. 57429 / 06381 = 9, 58239 / 06471 = 9, 75249 / 08361 = 9, 95742 / 10638 = 9, 95823 / 10647 = 9, 97524 / 10836 = 9。</p>
<p>问 2. E, V, D, I, T, A, L, K 代表数字 0 ~ 9, 且任意二个字母代表不同的数字, 且 E, D &gt; 0。解方程</p>
<p>EVE / DID = 0.TALKTALKTALK... (无限循环小数)</p>
<p>答. 212 / 606 = 0.3498..., 242 / 303 = 0.7986...。</p>
<p>问 1:</p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_66
 */
public class Pr_66 {

    public static void main(final String... args) {
        final MathPuzzle m = () -&gt; {
            // ABCDE / FGHIJ = 9
            // =&gt; ABCDE = 9 * FGHIJ
            int counter = 0;
            final int[][] perms = MathPuzzle.permutations(10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            for (final int[] p : perms) {
                final int n1 = 10000 * p[0] + 1000 * p[1] + 100 * p[2] + 10 * p[3] + p[4];
                final int n2 = 10000 * p[5] + 1000 * p[6] + 100 * p[7] + 10 * p[8] + p[9];
                // Convert int[] to Object[]
                final Object[] q = new Object[10];
                for (int i = 0; i &lt; 10; i++) {
                    q[i] = p[i];
                }
                if (n1 == 9 * n2) {
                    counter++;
                    System.out.println(String.format(&quot;%d%d%d%d%d / %d%d%d%d%d = 9&quot;, q));
                }
            }
            if (counter &lt; 2) {
                System.out.println(String.format(&quot;\nThere is %d solution.&quot;, counter));
            } else {
                System.out.println(String.format(&quot;\nThere are %d solutions.&quot;, counter));
            }
        };
        m.execute();
    }

}

</code></pre>
<p>问 2:</p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_67
 */
public class Pr_67 {

    final static public void main(final String... args) {
        ((MathPuzzle) () -&gt; {
            // EVE / DID = 0.TALKTALKTALK...
            // =&gt; EVE / DID = TALK / 9999
            // =&gt; EVE * 9999 = DID * TALK
            // E, V, D, I; T, A, L, K
            int counter = 0;
            final int[][] perms = MathPuzzle.permutations(8, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            for (final int[] p : perms) {
                if (p[0] == 0) {
                    continue;
                }
                if (p[2] == 0) {
                    continue;
                }
                final int n1 = 101 * p[0] + 10 * p[1];
                final int n2 = 101 * p[2] + 10 * p[3];
                final int n3 = 1000 * p[4] + 100 * p[5] + 10 * p[6] + p[7];
                final Object[] q = { n1, n2, p[4], p[5], p[6], p[7] };
                if (n1 * 9999 == n2 * n3) {
                    counter++;
                    System.out.println(String.format(&quot;%d / %d = 0.%d%d%d%d...&quot;, q));
                }
            }
            if (counter &lt; 2) {
                System.out.println(String.format(&quot;\nThere is %d solution.&quot;, counter));
            } else {
                System.out.println(String.format(&quot;\nThere are %d solutions.&quot;, counter));
            }
        }).execute();
    }

}

</code></pre>
<p>就这样。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[水 (0006)]]></title>
        <id>https://septsea.github.io/post/shui-0006/</id>
        <link href="https://septsea.github.io/post/shui-0006/">
        </link>
        <updated>2020-01-31T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>今日的水题有一点点独特的地方:</p>
<p>ONE + TWO + TWO + THREE + THREE = ELEVEN</p>
<p>各个字母自然是 0~9 之间的数, O, E, T 不为 0, 且一个数字至多替换一个字母。</p>
<p>如果您愿意看 e 下这个表达式, 并且您愿意看 English, you will realize that this is actually an example of the so-called &quot;double true cryptarithms&quot;, which are alphametics where the letters spell the words describing numbers so that the actual wording is also true.</p>
<p>答. 391 + 803 + 803 + 84611 + 84611 = 171219。</p>
<p>MathPuzzle 自然是昨日用剩的接口。</p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_65
 */
public class Pr_65 {

    final static public void main(final String... args) {
        ((MathPuzzle) () -&gt; {
            // ONE + TWO + TWO + THREE + THREE = ELEVEN
            // O, N, E; T, W; H, R; L, V: 0~9
            // O, E, T &gt; 0
            int counter = 0;
            final int[][] perms = MathPuzzle.permutations(9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            for (final int[] p : perms) {
                if (p[0] == 0) {
                    continue;
                }
                if (p[2] == 0) {
                    continue;
                }
                if (p[3] == 0) {
                    continue;
                }
                final int n1 = 100 * p[0] + 10 * p[1] + p[2];
                final int n2 = 100 * p[3] + 10 * p[4] + p[0];
                final int n3 = 10000 * p[3] + 1000 * p[5] + 100 * p[6] + 11 * p[2];
                final int n4 = 101010 * p[2] + 10000 * p[7] + 100 * p[8] + p[1];
                if (n1 + n2 * 2 + n3 * 2 == n4) {
                    counter++;
                    System.out.println(String.format(&quot;%d + %d + %d + %d + %d = %d&quot;, n1, n2, n2, n3, n3, n4));
                }
            }
            if (counter &lt; 2) {
                System.out.println(String.format(&quot;\nThere is %d solution.&quot;, counter));
            } else {
                System.out.println(String.format(&quot;\nThere are %d solutions.&quot;, counter));
            }
        }).execute();
    }

}

</code></pre>
<p>就这样吧, 谢谢。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[水 (0005)]]></title>
        <id>https://septsea.github.io/post/shui-0005/</id>
        <link href="https://septsea.github.io/post/shui-0005/">
        </link>
        <updated>2020-01-30T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>今日的水题跟武汉有一点关系:</p>
<p>JIA * YOU = WU * HAN</p>
<p>每个字母代表 1~9 的数字, 任意二个不同的字母代表不同的数字, 且 WU * HAN 的结果 (自然是十进制) 不含 0。</p>
<p>答. 123 * 564 = 94 * 738 = 69372。</p>
<p>以后我就写一个语言 (Java) 的代码好了, 毕竟它快, 而且比 C/C++ 容易。</p>
<p>代码在老地方。根据反馈, 想看的自然知道去哪儿看, 不想看的摆在哪儿也不会看。</p>
<p>欢迎交流 tricks。</p>
<p>其实本来是今日写完后明日休息, 但假期还有三日呀。那我就再写三日吧。</p>
<p>首先我们写一个接口。我昨日花了点时间写了个接口。毕竟每次都那么多代码, 看着也累。</p>
<pre><code class="language-java">package math_puzzle;

/**
 * MathPuzzle
 */
@FunctionalInterface
public interface MathPuzzle {

    /**
     * The executor of the mathematical puzzle.
     */
    public default void execute() {
        long time = 0;
        time = System.currentTimeMillis();
        System.out.println(&quot;&quot;);
        this.solve();
        time = System.currentTimeMillis() - time;
        System.out.println(String.format(&quot;\nTime elapsed: %d millisecond&quot;, time) + (time &lt; 2 ? &quot;&quot; : &quot;s&quot;) + &quot;.\n&quot;);
    }

    /**
     * The solver to be implemented.
     */
    public void solve();

    /**
     * Returns the factorial of an {@code int} value.
     * 
     * @param n the argument whose factorial is to be determined.
     * @return the absolute value of the argument.
     */
    public static int factorial(final int n) {
        int result = 1;
        if (n &gt; 1) {
            for (int i = 2; i &lt;= n; i++) {
                result *= i;
            }
        }
        return result;
    }

    /**
     * Returns the permutations of r integers taken from {@code int[] numbers}. If r
     * &gt; l = {@code numbers.length} or r &lt; 0, then an empty array is returned.
     * 
     * @param r       the length of the permutation.
     * @param numbers the integers to be taken from.
     * @return the permutations of r integers taken from {@code int[] numbers}.
     */
    public static int[][] permutations(final int r, final int... numbers) {
        final int l = numbers.length;
        if (r &gt; l || r &lt; 0) {
            return new int[][] {};
        } else if (r == 0) {
            return new int[][] { {} };
        } else if (r == 1) {
            final int[][] result = new int[l][1];
            for (int i = 0; i &lt; l; i++) {
                result[i][0] = numbers[i];
            }
            return result;
        } else {
            final int[][] result = new int[MathPuzzle.factorial(l) / MathPuzzle.factorial(l - r)][r];
            int counter = 0;
            for (int i = 0; i &lt; l; i++) {
                final int[] temp = new int[l - 1];
                for (int j = 0; j &lt; l; j++) {
                    if (j &lt; i) {
                        temp[j] = numbers[j];
                    } else if (j &gt; i) {
                        temp[j - 1] = numbers[j];
                    }
                }
                final int[][] temp_perms = MathPuzzle.permutations(r - 1, temp);
                for (final int[] temp_perm : temp_perms) {
                    result[counter][0] = numbers[i];
                    for (int j = 0; j &lt; r - 1; j++) {
                        result[counter][j + 1] = temp_perm[j];
                    }
                    counter++;
                }
            }
            return result;
        }
    }

}

</code></pre>
<p>然后, 解题:</p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_64
 */
public class Pr_64 {

    final static public void main(final String... args) {
        // There is only one method to be implemented, so lambda expressions are OK.
        ((MathPuzzle) () -&gt; {
            // JIA * YOU = WU * HAN
            // J, I, A, Y, O, U; W, H, N: 1~9
            // The condition that the result of WU * HAN not contain 0
            // is temporarily ignored.
            int counter = 0;
            final int[][] perms = MathPuzzle.permutations(9, 1, 2, 3, 4, 5, 6, 7, 8, 9);
            for (final int[] p : perms) {
                final int n1 = 100 * p[0] + 10 * p[1] + p[2];
                final int n2 = 100 * p[3] + 10 * p[4] + p[5];
                final int n3 = 10 * p[6] + p[5];
                final int n4 = 100 * p[7] + 10 * p[2] + p[8];
                if (n1 * n2 == n3 * n4) {
                    counter++;
                    System.out.println(String.format(&quot;%d * %d = %d * %d = %d&quot;, n1, n2, n3, n4, n1 * n2));
                }
            }
            if (counter &lt; 2) {
                System.out.println(String.format(&quot;\nThere is %d solution.&quot;, counter));
            } else {
                System.out.println(String.format(&quot;\nThere are %d solutions.&quot;, counter));
            }
        }).execute();
    }

}

</code></pre>
<p>Output:</p>
<pre><code class="language-java">
123 * 564 = 94 * 738 = 69372
374 * 215 = 85 * 946 = 80410

There are 2 solutions.

Time elapsed: 151 milliseconds.

</code></pre>
<p>显然第二个应当舍弃。所以只有第一个符合要求了。</p>
<p>就这样了, 谢谢大家的阅读。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[因式分解]]></title>
        <id>https://septsea.github.io/post/yin-shi-fen-jie/</id>
        <link href="https://septsea.github.io/post/yin-shi-fen-jie/">
        </link>
        <updated>2020-01-29T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>正月初五! 新年快乐呀!</p>
<p>求正整数 A, B (WLOG, 设 A &lt;= B) 使得 xx + Ax + B 与 xx + Bx + A 都能在整数范围内因式分解。</p>
<p>Case 1. A = B</p>
<p>当 A 是偶数 2k 时, xx + 2kx + 2k = (x + k)^2 - ((k - 1)^2 - 1), 只要 (k - 1)^2 - 1 可以写为 l^2 (l 为整数), 就可以在整数范围内因式分解了。由 (k - 1)^2 - 1 = l^2 可知 (k+l-1)(k-l-1) = 1, 所以必有 k+l-1 = k-l-1 = 1 or -1, 从而得到 k = 2 or 0, l = 0。从而 A = B = 0 (舍弃) or A = B = 4。</p>
<p>当 A 是奇数 2k+1 时, xx + (2k+1)x + (2k+1) = (x + (2k+1)/2)^2 - ((k-1/2)^2 - 1), 只要 (k-1/2)^2 - 1 可以写为 (l-1/2)^2 (l 为整数), 就可以在整数范围内因式分解了。由 (k-1/2)^2 - 1 = (l-1/2)^2 可知 (k - l)(k + l - 1) = 1, 所以必有 k - l = k + l - 1 = 1 or -1, 从而可得 1 = 2l, a contradiction!</p>
<p>综上, (A, B) = (4, 4)。</p>
<p>Case 2. A &lt; B</p>
<p>设 (x+r)(x+s) = xx + Ax + B, r &lt;= s;</p>
<p>设 (x+u)(x+v) = xx + Bx + A, u &lt;= v。</p>
<p>也就是 A = uv = r+s, B = u+v = rs, 从而 uv &lt; u+v, rs &gt; r+s。</p>
<p>因 u, v, r, s &gt; 0, 从而 1 &lt; 1/u + 1/v &lt;= 2/u, 1 &gt; 1/r + 1/s &gt;= 2/s, 也就是 u &lt; 2, s &gt; 2, 从而 u = 1, s &gt;= 3。</p>
<p>从而 1+r+s = rs, 那么 (r-1)(s-1) = 2。</p>
<p>s-1 &gt;= 2, 从而 s-1 = 2, r-1 = 1。也就是 A = 3+2 = 5, B = 3*2 = 6。</p>
<p>(A, B) 的另一个解为 (5, 6)。</p>
<p>综上, (A, B) = (4, 4) or (5, 6)。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[水 (0004)]]></title>
        <id>https://septsea.github.io/post/shui-0004/</id>
        <link href="https://septsea.github.io/post/shui-0004/">
        </link>
        <updated>2020-01-28T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>正月初四! 新年快乐呀!</p>
<p>好了, 今天我们再来看一个题。</p>
<p>已知 4 位数 KING 与 6 位数 KNIGHT 都是完全平方数, 且任意二个字母代表不同的数字。求这二个数。</p>
<p>首先, sqrt KING 至少是 32, sqrt KNIGHT 至少是 317。</p>
<p>一个一个找吧! 这真巧! 至少对我来说是这样的。</p>
<p>有什么好办法一定要告诉我呀。</p>
<p>答案: KING = 3721, KNIGHT = 327184。</p>
<p>Python:</p>
<pre><code class="language-python">from time import time
from math import ceil


def main(*args) -&gt; None:
    t: float = 0
    t = time()
    print(&quot;&quot;)
    solve()
    t = time() - t
    ms: int = ceil(1000 * t)
    print(&quot;\nTime elapsed: &quot; + str(ms) + &quot; millisecond&quot; +
          (&quot;&quot; if ms &lt; 2 else &quot;s&quot;) + &quot;.\n&quot;)


def isDistinct(*elements) -&gt; bool:
    l: int = len(elements)
    for i in range(0, l - 1):
        for j in range(i + 1, l):
            if (elements[i] == elements[j]):
                return False
    return True


def int_sqrt(n: int) -&gt; int:
    # If there exists a positive INTEGER l such that l^2 = n, it returns l
    # Otherwise, it returns -1
    l: int = 0
    while (&quot;&quot;&quot;
    I do not love bilibili
    if hills.height == 0
    and river.water == 0
    and 1 / winter.thunder &lt; 1e-9
    and summer.rain_and_snow &gt; 0
    and ceiling.height == floor.height
    &quot;&quot;&quot;):
        if (l * l &gt; n):
            break
        if (l * l == n):
            return l
        l += 1
    return -1


def solve() -&gt; None:
    # Both KING and KNIGHT are perfect squares
    counter: int = 0
    # i1 stands for K, which is not zero
    for i1 in range(1, 10):
        for i2 in range(0, 10):
            for i3 in range(0, 10):
                for i4 in range(0, 10):
                    for i5 in range(0, 10):
                        for i6 in range(0, 10):
                            # Checks whether the numbers are distinct
                            if (not isDistinct(i1, i2, i3, i4, i5, i6)):
                                continue
                            if (int_sqrt(1000 * i1 + 100 * i2 + 10 * i3 + i4) != -1 and int_sqrt(100000 * i1 + 10000 * i3 + 1000 * i2 + 100 * i4 + 10 * i5 + i6) != -1):
                                counter += 1
                                print(&quot;%d%d%d%d    %d%d%d%d%d%d&quot; %
                                      (i1, i2, i3, i4, i1, i3, i2, i4, i5, i6))
    if (counter &lt; 2):
        print(&quot;\nThere is %d solution.&quot; % (counter))
    else:
        print(&quot;\nThere are %d solutions.&quot; % (counter))


if __name__ == &quot;__main__&quot;:
    main()

</code></pre>
<p>Python Output:</p>
<pre><code class="language-python">
3721    327184

There is 1 solution.

Time elapsed: 3165 milliseconds.

</code></pre>
<p>Java:</p>
<p><em>Package name</em>: <code>math_puzzle</code>; <em>File name</em>: <code>Pr_4.java</code></p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_4
 */
public class Pr_4 {

    public static void main(final String... args) {
        long time = 0;
        time = System.currentTimeMillis();
        System.out.println(&quot;&quot;);
        Pr_4.solve();
        time = System.currentTimeMillis() - time;
        System.out.println(String.format(&quot;\nTime elapsed: %d millisecond&quot;, time) + (time &lt; 2 ? &quot;&quot; : &quot;s&quot;) + &quot;.\n&quot;);
    }

    public static boolean isDistinct(final int... elements) {
        final int l = elements.length;
        for (int i = 0; i &lt; l - 1; i++) {
            for (int j = i + 1; j &lt; l; j++) {
                if (elements[i] == elements[j]) {
                    return false;
                }
            }
        }
        return true;
    }

    public static int int_sqrt(final int n) {
        // If there exists an INTEGER l such that l^2 = n, it returns l
        // Otherwise, it returns -1
        int l = 0;
        while (true) {
            if (l * l &gt; n) {
                break;
            }
            if (l * l == n) {
                return l;
            }
            l++;
        }
        return -1;
    }

    public static void solve() {
        // Both KING and KNIGHT are perfect squares
        int counter = 0;
        // i1 stands for K, which is not zero
        for (int i1 = 1; i1 &lt; 10; i1++) {
            for (int i2 = 0; i2 &lt; 10; i2++) {
                for (int i3 = 0; i3 &lt; 10; i3++) {
                    for (int i4 = 0; i4 &lt; 10; i4++) {
                        for (int i5 = 0; i5 &lt; 10; i5++) {
                            for (int i6 = 0; i6 &lt; 10; i6++) {
                                // Checks whether the numbers are distinct
                                if (!Pr_4.isDistinct(i1, i2, i3, i4, i5, i6)) {
                                    continue;
                                }
                                if (Pr_4.int_sqrt(1000 * i1 + 100 * i2 + 10 * i3 + i4) != -1 &amp;&amp; Pr_4.int_sqrt(
                                        100000 * i1 + 10000 * i3 + 1000 * i2 + 100 * i4 + 10 * i5 + i6) != -1) {
                                    counter++;
                                    System.out.println(String.format(&quot;%d%d%d%d    %d%d%d%d%d%d&quot;, i1, i2, i3, i4, i1, i3,
                                            i2, i4, i5, i6));
                                }
                            }
                        }
                    }
                }

            }
        }
        if (counter &lt; 2) {
            System.out.println(String.format(&quot;\nThere is %d solution.&quot;, counter));
        } else {
            System.out.println(String.format(&quot;\nThere are %d solutions.&quot;, counter));
        }
    }

}

</code></pre>
<p>Java Output:</p>
<pre><code class="language-java">
3721    327184

There is 1 solution.

Time elapsed: 67 milliseconds.

</code></pre>
<p>JavaScript:</p>
<pre><code class="language-javascript">&quot;use strict&quot;;

function main() {
    let args = [];
    for (let _i = 0; _i &lt; arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    let time = 0;
    time = (new Date()).valueOf();
    console.log(&quot;&quot;);
    solve();
    time = (new Date()).valueOf() - time;
    console.log(`\nTime elapsed: ${time} millisecond` + (time &lt; 2 ? &quot;&quot; : &quot;s&quot;) + &quot;.\n&quot;);
}

function isDistinct() {
    let elements = [];
    for (let _i = 0; _i &lt; arguments.length; _i++) {
        elements[_i] = arguments[_i];
    }
    let l = elements.length;
    for (let i = 0; i &lt; l - 1; i++) {
        for (let j = i + 1; j &lt; l; j++) {
            if (elements[i] === elements[j]) {
                return false;
            }
        }
    }
    return true;
}

function int_sqrt(n) {
    // If there exists an INTEGER l such that l^2 = n, it returns l
    // Otherwise, it returns -1
    let l = 0;
    while (true) {
        if (l * l &gt; n) {
            break;
        }
        if (l * l === n) {
            return l;
        }
        l++;
    }
    return -1;
}

function solve() {
    // Both KING and KNIGHT are perfect squares
    let counter = 0;
    // i1 stands for K, which is not zero
    for (let i1 = 1; i1 &lt; 10; i1++) {
        for (let i2 = 0; i2 &lt; 10; i2++) {
            for (let i3 = 0; i3 &lt; 10; i3++) {
                for (let i4 = 0; i4 &lt; 10; i4++) {
                    for (let i5 = 0; i5 &lt; 10; i5++) {
                        for (let i6 = 0; i6 &lt; 10; i6++) {
                            // Checks whether the numbers are distinct
                            if (!isDistinct(i1, i2, i3, i4, i5, i6)) {
                                continue;
                            }
                            if (int_sqrt(1000 * i1 + 100 * i2 + 10 * i3 + i4) !== -1 &amp;&amp; int_sqrt(100000 * i1 + 10000 * i3 + 1000 * i2 + 100 * i4 + 10 * i5 + i6) !== -1) {
                                counter++;
                                console.log(`${i1}${i2}${i3}${i4}    ${i1}${i3}${i2}${i4}${i5}${i6}`);
                            }
                        }
                    }
                }
            }
        }
    }
    if (counter &lt; 2) {
        console.log(`\nThere is ${counter} solution.`);
    }
    else {
        console.log(`\nThere are ${counter} solutions.`);
    }
}

main();

</code></pre>
<p>JavaScript Output:</p>
<pre><code class="language-javascript">
3721    327184

There is 1 solution.

Time elapsed: 125 milliseconds.

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一个对调了的方程]]></title>
        <id>https://septsea.github.io/post/yi-ge-dui-diao-liao-de-fang-cheng/</id>
        <link href="https://septsea.github.io/post/yi-ge-dui-diao-liao-de-fang-cheng/">
        </link>
        <updated>2020-01-27T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>正月初三! 新年快乐呀!</p>
<p>已知 C 是正整数, AB 是大于 9 的二位数, 且 A 不等于 B。</p>
<p>方程 xx - Cx + AB = 0 与 xx + Cx - BA = 0 有公共根。</p>
<p>求公共根。</p>
<p>设 xx - Cx + AB = 0 的两根为 x0, x1; xx + Cx - BA = 0 的两根为 x0, x2。</p>
<p>从而</p>
<p>x0 + x1 = C,  x0 * x1 = AB;</p>
<p>x0 + x2 = -C, x0 * x2 = -BA。</p>
<p>那么</p>
<p>2 * x0 + (x1 + x2) = 0</p>
<p>x0 * (x1 + x2) = AB - BA = 9 * (A - B)</p>
<p>x1 + x2 = -2 * x0</p>
<p>x0 * (-2 * x0) = 9 * (A - B)</p>
<p>2 * x0 * x0 = 9 * (B - A)</p>
<p>因为 A 不等于 B, 所以 x0 一定是 3 的非零倍数, 且 B - A 一定是正偶数。</p>
<p>由于 B - A &lt;= 9 + (-1) = 8, 所以 2 * x0 * x0 &lt;= 72 =&gt; x0 = 3, -3, 6 or -6。</p>
<p>并且</p>
<p>x1 - x2 = 2 * C, x1 + x2 = -2 * x0</p>
<p>x0 * (x1 - x2) = 11 * (A + B)</p>
<p>2 * C * x0 = 11 * (A + B)</p>
<p>因为 11 不整除 x0, 所以 C 是 11 的倍数。A + B 一定是 3 的倍数, 又因为 A + B 是偶数 (B - A 是偶数), 所以 A + B 可能为 6, 12 (18 = 9 + 9, 不合题意)。并且, 由于 C &gt; 0, 必有 x0 &gt; 0。</p>
<p>A + B = 6 =&gt; 2 * C * x0 = 66 =&gt; C * x0 = 33 =&gt; (C, x0) = (11, 3)。这时 2 * 9 = 9 * (B - A), B - A = 2。解出 A = 2, B = 4。经检验, xx - 11x + 24 = 0 与 xx + 11x - 42 = 0 都有一个根为 3。</p>
<p>A + B = 12 =&gt; 2 * C * x0 = 132 =&gt; C * x0 = 66 =&gt; (C, x0) = (22, 3) or (11, 6)。x0 为 3 时解出 B - A = 2, 从而 A = 5, B = 7。经检验, xx - 22x + 57 = 0 与 xx + 22x - 75 = 0 都有一个根为 3。x0 为 6 时 B - A = 8, 从而 A = 2, B = 10 (舍弃)。</p>
<p>结论: 公共根 = 3。</p>
<p>就这样。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[水 (0003)]]></title>
        <id>https://septsea.github.io/post/shui-0003/</id>
        <link href="https://septsea.github.io/post/shui-0003/">
        </link>
        <updated>2020-01-26T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>正月初二! 新年快乐呀!</p>
<p>好了, 今天我们再来看一个题。</p>
<p>ATOM = (A + TO + M) squared</p>
<p>A, T, O, M 的取值范围是 1 ~ 9 的整数, 且任意二个字母代表不同的数字。</p>
<p>思考一下, 一个完全平方数, 末尾必定是 0, 1, 4, 9, 6, 5 的一个。</p>
<p>从而 M 只有可能是 1, 4, 5, 6, 9 的一个。</p>
<p>既然 ATOM 是 4 位数, 那么 A + TO + M 必定不小于 32。</p>
<p>嗯, 事实上 32, 33, 34, 35 都不行 (要么就是有 0, 要么就是有重复出现的数字)。</p>
<p>36 squared = 1296, 1 + 29 + 6 = 36。一个解就这么找到了。</p>
<p>有没有什么窍门呀。毕竟, 这个暴力求解很快的, 但是人到 20, 智商滑坡。</p>
<p>有什么好办法一定要告诉我呀。</p>
<p>还有, 这次 Python 挺快的。</p>
<p>还有, 第二个 (没有第三个了) 解是 6724。</p>
<p>Python:</p>
<pre><code class="language-python">from time import time
from math import ceil


def main(*args) -&gt; None:
    t: float = 0
    t = time()
    print(&quot;&quot;)
    solve()
    t = time() - t
    ms: int = ceil(1000 * t)
    print(&quot;\nTime elapsed: &quot; + str(ms) + &quot; millisecond&quot; +
          (&quot;&quot; if ms &lt; 2 else &quot;s&quot;) + &quot;.\n&quot;)


def isDistinct(*elements) -&gt; bool:
    l: int = len(elements)
    for i in range(0, l - 1):
        for j in range(i + 1, l):
            if (elements[i] == elements[j]):
                return False
    return True


def solve() -&gt; None:
    # ATOM = (A + TO + M) squared
    counter: int = 0
    for i1 in range(1, 10):
        for i2 in range(1, 10):
            for i3 in range(1, 10):
                for i4 in range(1, 10):
                    # Checks whether the numbers are distinct
                    if (not isDistinct(i1, i2, i3, i4)):
                        continue
                    if ((1000 * i1 + 100 * i2 + 10 * i3 + i4) == (i1 + 10 * i2 + i3 + i4) * (i1 + 10 * i2 + i3 + i4)):
                        counter += 1
                        print(&quot;%d%d%d%d = (%d + %d%d + %d) squared&quot; %
                              (i1, i2, i3, i4, i1, i2, i3, i4))
    if (counter &lt; 2):
        print(&quot;\nThere is %d solution.&quot; % (counter))
    else:
        print(&quot;\nThere are %d solutions.&quot; % (counter))


if __name__ == &quot;__main__&quot;:
    main()

</code></pre>
<p>Python Output:</p>
<pre><code class="language-python">
1296 = (1 + 29 + 6) squared
6724 = (6 + 72 + 4) squared

There are 2 solutions.

Time elapsed: 13 milliseconds.

</code></pre>
<p>Java:</p>
<p><em>Package name</em>: <code>math_puzzle</code>; <em>File name</em>: <code>Pr_3.java</code></p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_3
 */
public class Pr_3 {

    public static void main(final String... args) {
        long time = 0;
        time = System.currentTimeMillis();
        System.out.println(&quot;&quot;);
        Pr_3.solve();
        time = System.currentTimeMillis() - time;
        System.out.println(String.format(&quot;\nTime elapsed: %d millisecond&quot;, time) + (time &lt; 2 ? &quot;&quot; : &quot;s&quot;) + &quot;.\n&quot;);
    }

    public static boolean isDistinct(final int... elements) {
        final int l = elements.length;
        for (int i = 0; i &lt; l - 1; i++) {
            for (int j = i + 1; j &lt; l; j++) {
                if (elements[i] == elements[j]) {
                    return false;
                }
            }
        }
        return true;
    }

    public static void solve() {
        // ATOM = (A + TO + M) squared
        int counter = 0;
        for (int i1 = 1; i1 &lt; 10; i1++) {
            for (int i2 = 1; i2 &lt; 10; i2++) {
                for (int i3 = 1; i3 &lt; 10; i3++) {
                    for (int i4 = 1; i4 &lt; 10; i4++) {
                        // Checks whether the numbers are distinct
                        if (!Pr_3.isDistinct(i1, i2, i3, i4)) {
                            continue;
                        }
                        if ((1000 * i1 + 100 * i2 + 10 * i3 + i4) == (i1 + 10 * i2 + i3 + i4)
                                * (i1 + 10 * i2 + i3 + i4)) {
                            counter++;
                            System.out.println(String.format(&quot;%d%d%d%d = (%d + %d%d + %d) squared&quot;, i1, i2, i3, i4, i1,
                                    i2, i3, i4));
                        }
                    }
                }
            }
        }
        if (counter &lt; 2) {
            System.out.println(String.format(&quot;\nThere is %d solution.&quot;, counter));
        } else {
            System.out.println(String.format(&quot;\nThere are %d solutions.&quot;, counter));
        }
    }

}

</code></pre>
<p>Java Output:</p>
<pre><code class="language-java">
1296 = (1 + 29 + 6) squared
6724 = (6 + 72 + 4) squared

There are 2 solutions.

Time elapsed: 5 milliseconds.

</code></pre>
<p>JavaScript:</p>
<pre><code class="language-javascript">&quot;use strict&quot;;

function main() {
    let args = [];
    for (let _i = 0; _i &lt; arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    let time = 0;
    time = (new Date()).valueOf();
    console.log(&quot;&quot;);
    solve();
    time = (new Date()).valueOf() - time;
    console.log(`\nTime elapsed: ${time} millisecond` + (time &lt; 2 ? &quot;&quot; : &quot;s&quot;) + &quot;.\n&quot;);
}

function isDistinct() {
    let elements = [];
    for (let _i = 0; _i &lt; arguments.length; _i++) {
        elements[_i] = arguments[_i];
    }
    let l = elements.length;
    for (let i = 0; i &lt; l - 1; i++) {
        for (let j = i + 1; j &lt; l; j++) {
            if (elements[i] === elements[j]) {
                return false;
            }
        }
    }
    return true;
}

function solve() {
    // ATOM = (A + TO + M) squared
    let counter = 0;
    for (let i1 = 1; i1 &lt; 10; i1++) {
        for (let i2 = 1; i2 &lt; 10; i2++) {
            for (let i3 = 1; i3 &lt; 10; i3++) {
                for (let i4 = 1; i4 &lt; 10; i4++) {
                    // Checks whether the numbers are distinct
                    if (!isDistinct(i1, i2, i3, i4)) {
                        continue;
                    }
                    if ((1000 * i1 + 100 * i2 + 10 * i3 + i4) == (i1 + 10 * i2 + i3 + i4) * (i1 + 10 * i2 + i3 + i4)) {
                        counter++;
                        console.log(`${i1}${i2}${i3}${i4} = (${i1} + ${i2}${i3} + ${i4}) squared`);
                    }
                }
            }
        }
    }
    if (counter &lt; 2) {
        console.log(`\nThere is ${counter} solution.`);
    }
    else {
        console.log(`\nThere are ${counter} solutions.`);
    }
}

main();

</code></pre>
<p>JavaScript Output:</p>
<pre><code class="language-javascript">
1296 = (1 + 29 + 6) squared
6724 = (6 + 72 + 4) squared

There are 2 solutions.

Time elapsed: 8 milliseconds.

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[水 (0002)]]></title>
        <id>https://septsea.github.io/post/shui-0002/</id>
        <link href="https://septsea.github.io/post/shui-0002/">
        </link>
        <updated>2020-01-25T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>正月初一! 新年快乐呀!</p>
<p>我今年呆在家过年了, 不去拜年了。</p>
<p>好了, 今天我们看二个题。</p>
<p>问 1. (昨日的题的一个变式) A, B, C, D, E, F, G, H, I 表示 1~9, 且任意二个字母表示不同的数字。解方程</p>
<p>AB / C + DE / F = GH / I</p>
<p>这个应该比昨日的简单嗷。</p>
<p>而且, 用 PC 解题就是方便, 我只是小改了一下代码, 就又可以算题了。</p>
<p>顺带一提, Python 好慢啊。</p>
<p>答案太长了, 一共 41 个解。</p>
<p>Python:</p>
<pre><code class="language-python">from time import time
from math import ceil


def main(*args) -&gt; None:
    t: float = 0
    t = time()
    print(&quot;&quot;)
    solve()
    t = time() - t
    ms: int = ceil(1000 * t)
    print(&quot;\nTime elapsed: &quot; + str(ms) + &quot; millisecond&quot; +
          (&quot;&quot; if ms &lt; 2 else &quot;s&quot;) + &quot;.\n&quot;)


def isDistinct(*elements) -&gt; bool:
    l: int = len(elements)
    for i in range(0, l - 1):
        for j in range(i + 1, l):
            if (elements[i] == elements[j]):
                return False
    return True


def solve() -&gt; None:
    # AB / C + DE / F = GH / I
    # This is
    # (AB * F + DE * C) * I = GH * C * F
    counter: int = 0
    for i1 in range(1, 10):
        for i2 in range(1, 10):
            for i3 in range(1, 10):
                for i4 in range(1, 10):
                    for i5 in range(1, 10):
                        for i6 in range(1, 10):
                            for i7 in range(1, 10):
                                for i8 in range(1, 10):
                                    for i9 in range(1, 10):
                                        # Checks whether the numbers are distinct
                                        if (not isDistinct(i1, i2, i3, i4, i5, i6, i7, i8, i9)):
                                            continue
                                        # Since both a + b and b + a are fine, WLOG let's display only one
                                        if ((10 * i1 + i2) * i6 &gt; (10 * i4 + i5) * i3):
                                            continue
                                        if ((10 * i1 + i2) * i6 == (10 * i4 + i5) * i3 and (10 * i1 + i2) &gt; (10 * i4 + i5)):
                                            continue
                                        if (((10 * i1 + i2) * i6 + (10 * i4 + i5) * i3) * i9 == (10 * i7 + i8) * i3 * i6):
                                            counter += 1
                                            print(&quot;%d%d / %d + %d%d / %d = %d%d / %d&quot; %
                                                  (i1, i2, i3, i4, i5, i6, i7, i8, i9))
    if (counter &lt; 2):
        print(&quot;\nThere is %d solution.&quot; % (counter))
    else:
        print(&quot;\nThere are %d solutions.&quot; % (counter))


if __name__ == &quot;__main__&quot;:
    main()

</code></pre>
<p>Python Output:</p>
<pre><code class="language-python">
13 / 2 + 45 / 6 = 98 / 7
14 / 2 + 96 / 8 = 57 / 3
14 / 6 + 32 / 8 = 57 / 9
15 / 9 + 28 / 7 = 34 / 6
15 / 9 + 67 / 3 = 48 / 2
16 / 8 + 92 / 4 = 75 / 3
17 / 2 + 58 / 4 = 69 / 3
18 / 3 + 54 / 9 = 72 / 6
18 / 3 + 72 / 9 = 56 / 4
18 / 6 + 54 / 9 = 27 / 3
18 / 9 + 35 / 7 = 42 / 6
18 / 9 + 46 / 2 = 75 / 3
21 / 7 + 96 / 8 = 45 / 3
21 / 9 + 73 / 6 = 58 / 4
23 / 6 + 18 / 4 = 75 / 9
24 / 6 + 35 / 7 = 81 / 9
24 / 8 + 16 / 3 = 75 / 9
27 / 9 + 15 / 3 = 48 / 6
27 / 9 + 15 / 3 = 64 / 8
27 / 9 + 18 / 3 = 54 / 6
27 / 9 + 84 / 6 = 51 / 3
32 / 8 + 54 / 6 = 91 / 7
35 / 7 + 14 / 2 = 96 / 8
41 / 3 + 89 / 6 = 57 / 2
45 / 6 + 37 / 1 = 89 / 2
45 / 9 + 81 / 6 = 37 / 2
48 / 9 + 65 / 3 = 27 / 1
49 / 7 + 58 / 2 = 36 / 1
54 / 3 + 98 / 2 = 67 / 1
54 / 6 + 98 / 7 = 23 / 1
54 / 9 + 21 / 3 = 78 / 6
54 / 9 + 37 / 1 = 86 / 2
54 / 9 + 76 / 8 = 31 / 2
56 / 7 + 81 / 9 = 34 / 2
57 / 9 + 18 / 2 = 46 / 3
58 / 4 + 97 / 2 = 63 / 1
58 / 6 + 97 / 3 = 42 / 1
81 / 9 + 75 / 6 = 43 / 2
87 / 9 + 46 / 3 = 25 / 1
95 / 6 + 74 / 3 = 81 / 2
96 / 8 + 45 / 3 = 27 / 1

There are 41 solutions.

Time elapsed: 638795 milliseconds.

</code></pre>
<p>Java:</p>
<p><em>Package name</em>: <code>math_puzzle</code>; <em>File name</em>: <code>Pr_2.java</code></p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_2
 */
public class Pr_2 {

    public static void main(final String... args) {
        long time = 0;
        time = System.currentTimeMillis();
        System.out.println(&quot;&quot;);
        Pr_2.solve();
        time = System.currentTimeMillis() - time;
        System.out.println(String.format(&quot;\nTime elapsed: %d millisecond&quot;, time) + (time &lt; 2 ? &quot;&quot; : &quot;s&quot;) + &quot;.\n&quot;);
    }

    public static boolean isDistinct(final int... elements) {
        final int l = elements.length;
        for (int i = 0; i &lt; l - 1; i++) {
            for (int j = i + 1; j &lt; l; j++) {
                if (elements[i] == elements[j]) {
                    return false;
                }
            }
        }
        return true;
    }

    public static void solve() {
        // AB / C + DE / F = GH / I
        // This is
        // (AB * F + DE * C) * I = GH * C * F
        int counter = 0;
        for (int i1 = 1; i1 &lt; 10; i1++) {
            for (int i2 = 1; i2 &lt; 10; i2++) {
                for (int i3 = 1; i3 &lt; 10; i3++) {
                    for (int i4 = 1; i4 &lt; 10; i4++) {
                        for (int i5 = 1; i5 &lt; 10; i5++) {
                            for (int i6 = 1; i6 &lt; 10; i6++) {
                                for (int i7 = 1; i7 &lt; 10; i7++) {
                                    for (int i8 = 1; i8 &lt; 10; i8++) {
                                        for (int i9 = 1; i9 &lt; 10; i9++) {
                                            // Checks whether the numbers are distinct
                                            if (!Pr_2.isDistinct(i1, i2, i3, i4, i5, i6, i7, i8, i9)) {
                                                continue;
                                            }
                                            // Since both a + b and b + a are fine, WLOG let's display only one
                                            if ((10 * i1 + i2) * i6 &gt; (10 * i4 + i5) * i3) {
                                                continue;
                                            }
                                            if ((10 * i1 + i2) * i6 == (10 * i4 + i5) * i3
                                                    &amp;&amp; (10 * i1 + i2) &gt; (10 * i4 + i5)) {
                                                continue;
                                            }
                                            if (((10 * i1 + i2) * i6 + (10 * i4 + i5) * i3) * i9 == (10 * i7 + i8) * i3
                                                    * i6) {
                                                counter++;
                                                System.out.println(String.format(&quot;%d%d / %d + %d%d / %d = %d%d / %d&quot;,
                                                        i1, i2, i3, i4, i5, i6, i7, i8, i9));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (counter &lt; 2) {
            System.out.println(String.format(&quot;\nThere is %d solution.&quot;, counter));
        } else {
            System.out.println(String.format(&quot;\nThere are %d solutions.&quot;, counter));
        }
    }

}

</code></pre>
<p>Java Output:</p>
<pre><code class="language-java">
13 / 2 + 45 / 6 = 98 / 7
14 / 2 + 96 / 8 = 57 / 3
14 / 6 + 32 / 8 = 57 / 9
15 / 9 + 28 / 7 = 34 / 6
15 / 9 + 67 / 3 = 48 / 2
16 / 8 + 92 / 4 = 75 / 3
17 / 2 + 58 / 4 = 69 / 3
18 / 3 + 54 / 9 = 72 / 6
18 / 3 + 72 / 9 = 56 / 4
18 / 6 + 54 / 9 = 27 / 3
18 / 9 + 35 / 7 = 42 / 6
18 / 9 + 46 / 2 = 75 / 3
21 / 7 + 96 / 8 = 45 / 3
21 / 9 + 73 / 6 = 58 / 4
23 / 6 + 18 / 4 = 75 / 9
24 / 6 + 35 / 7 = 81 / 9
24 / 8 + 16 / 3 = 75 / 9
27 / 9 + 15 / 3 = 48 / 6
27 / 9 + 15 / 3 = 64 / 8
27 / 9 + 18 / 3 = 54 / 6
27 / 9 + 84 / 6 = 51 / 3
32 / 8 + 54 / 6 = 91 / 7
35 / 7 + 14 / 2 = 96 / 8
41 / 3 + 89 / 6 = 57 / 2
45 / 6 + 37 / 1 = 89 / 2
45 / 9 + 81 / 6 = 37 / 2
48 / 9 + 65 / 3 = 27 / 1
49 / 7 + 58 / 2 = 36 / 1
54 / 3 + 98 / 2 = 67 / 1
54 / 6 + 98 / 7 = 23 / 1
54 / 9 + 21 / 3 = 78 / 6
54 / 9 + 37 / 1 = 86 / 2
54 / 9 + 76 / 8 = 31 / 2
56 / 7 + 81 / 9 = 34 / 2
57 / 9 + 18 / 2 = 46 / 3
58 / 4 + 97 / 2 = 63 / 1
58 / 6 + 97 / 3 = 42 / 1
81 / 9 + 75 / 6 = 43 / 2
87 / 9 + 46 / 3 = 25 / 1
95 / 6 + 74 / 3 = 81 / 2
96 / 8 + 45 / 3 = 27 / 1

There are 41 solutions.

Time elapsed: 6489 milliseconds.

</code></pre>
<p>JavaScript:</p>
<pre><code class="language-javascript">&quot;use strict&quot;;

function main() {
    let args = [];
    for (let _i = 0; _i &lt; arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    let time = 0;
    time = (new Date()).valueOf();
    console.log(&quot;&quot;);
    solve();
    time = (new Date()).valueOf() - time;
    console.log(`\nTime elapsed: ${time} millisecond` + (time &lt; 2 ? &quot;&quot; : &quot;s&quot;) + &quot;.\n&quot;);
}

function isDistinct() {
    let elements = [];
    for (let _i = 0; _i &lt; arguments.length; _i++) {
        elements[_i] = arguments[_i];
    }
    let l = elements.length;
    for (let i = 0; i &lt; l - 1; i++) {
        for (let j = i + 1; j &lt; l; j++) {
            if (elements[i] === elements[j]) {
                return false;
            }
        }
    }
    return true;
}

function solve() {
    // AB / C + DE / F = GH / I
    // This is
    // (AB * F + DE * C) * I = GH * C * F
    let counter = 0;
    for (let i1 = 1; i1 &lt; 10; i1++) {
        for (let i2 = 1; i2 &lt; 10; i2++) {
            for (let i3 = 1; i3 &lt; 10; i3++) {
                for (let i4 = 1; i4 &lt; 10; i4++) {
                    for (let i5 = 1; i5 &lt; 10; i5++) {
                        for (let i6 = 1; i6 &lt; 10; i6++) {
                            for (let i7 = 1; i7 &lt; 10; i7++) {
                                for (let i8 = 1; i8 &lt; 10; i8++) {
                                    for (let i9 = 1; i9 &lt; 10; i9++) {
                                        // Checks whether the numbers are distinct
                                        if (!isDistinct(i1, i2, i3, i4, i5, i6, i7, i8, i9)) {
                                            continue;
                                        }
                                        // Since both a + b and b + a are fine, WLOG let's display only one
                                        if ((10 * i1 + i2) * i6 &gt; (10 * i4 + i5) * i3) {
                                            continue;
                                        }
                                        if ((10 * i1 + i2) * i6 === (10 * i4 + i5) * i3 &amp;&amp; (10 * i1 + i2) &gt; (10 * i4 + i5)) {
                                            continue;
                                        }
                                        if (((10 * i1 + i2) * i6 + (10 * i4 + i5) * i3) * i9 === (10 * i7 + i8) * i3 * i6) {
                                            counter++;
                                            console.log(`${i1}${i2} / ${i3} + ${i4}${i5} / ${i6} = ${i7}${i8} / ${i9}`);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (counter &lt; 2) {
        console.log(`\nThere is ${counter} solution.`);
    }
    else {
        console.log(`\nThere are ${counter} solutions.`);
    }
}

main();

</code></pre>
<p>JavaScript Output:</p>
<pre><code class="language-javascript">
13 / 2 + 45 / 6 = 98 / 7
14 / 2 + 96 / 8 = 57 / 3
14 / 6 + 32 / 8 = 57 / 9
15 / 9 + 28 / 7 = 34 / 6
15 / 9 + 67 / 3 = 48 / 2
16 / 8 + 92 / 4 = 75 / 3
17 / 2 + 58 / 4 = 69 / 3
18 / 3 + 54 / 9 = 72 / 6
18 / 3 + 72 / 9 = 56 / 4
18 / 6 + 54 / 9 = 27 / 3
18 / 9 + 35 / 7 = 42 / 6
18 / 9 + 46 / 2 = 75 / 3
21 / 7 + 96 / 8 = 45 / 3
21 / 9 + 73 / 6 = 58 / 4
23 / 6 + 18 / 4 = 75 / 9
24 / 6 + 35 / 7 = 81 / 9
24 / 8 + 16 / 3 = 75 / 9
27 / 9 + 15 / 3 = 48 / 6
27 / 9 + 15 / 3 = 64 / 8
27 / 9 + 18 / 3 = 54 / 6
27 / 9 + 84 / 6 = 51 / 3
32 / 8 + 54 / 6 = 91 / 7
35 / 7 + 14 / 2 = 96 / 8
41 / 3 + 89 / 6 = 57 / 2
45 / 6 + 37 / 1 = 89 / 2
45 / 9 + 81 / 6 = 37 / 2
48 / 9 + 65 / 3 = 27 / 1
49 / 7 + 58 / 2 = 36 / 1
54 / 3 + 98 / 2 = 67 / 1
54 / 6 + 98 / 7 = 23 / 1
54 / 9 + 21 / 3 = 78 / 6
54 / 9 + 37 / 1 = 86 / 2
54 / 9 + 76 / 8 = 31 / 2
56 / 7 + 81 / 9 = 34 / 2
57 / 9 + 18 / 2 = 46 / 3
58 / 4 + 97 / 2 = 63 / 1
58 / 6 + 97 / 3 = 42 / 1
81 / 9 + 75 / 6 = 43 / 2
87 / 9 + 46 / 3 = 25 / 1
95 / 6 + 74 / 3 = 81 / 2
96 / 8 + 45 / 3 = 27 / 1

There are 41 solutions.

Time elapsed: 34001 milliseconds.

</code></pre>
<p>问 2. H, A, P, Y, N, E, W, R 表示 0, 1, 3, 4, 5, 6, 7, 8, 9, 且任意二个字母表示不同的数字。解方程</p>
<p>HAPPY - NEW = YEAR * 2</p>
<p>这个应该更简单吧。答案有且只有一个:</p>
<p>14776 - 890 = 6943 * 2</p>
<p>Python:</p>
<pre><code class="language-python">from time import time
from math import ceil


def main(*args) -&gt; None:
    t: float = 0
    t = time()
    print(&quot;&quot;)
    solve()
    t = time() - t
    ms: int = ceil(1000 * t)
    print(&quot;\nTime elapsed: &quot; + str(ms) + &quot; millisecond&quot; +
          (&quot;&quot; if ms &lt; 2 else &quot;s&quot;) + &quot;.\n&quot;)


def isDistinct(*elements) -&gt; bool:
    l: int = len(elements)
    for i in range(0, l - 1):
        for j in range(i + 1, l):
            if (elements[i] == elements[j]):
                return False
    return True


def solve() -&gt; None:
    # HAPPY - NEW = YEAR * 2
    # H, A, P, Y, N, E, W, R: 0 ~ 9
    # H, Y, N &gt; 0
    # No letter can stand for 2
    # No two distinct letters stand for the same integer
    counter: int = 0
    HAPPY: int = 0
    NEW: int = 0
    YEAR: int = 0
    for i1 in range(1, 10):
        for i2 in range(0, 10):
            for i3 in range(0, 10):
                for i4 in range(1, 10):
                    for i5 in range(1, 10):
                        for i6 in range(0, 10):
                            for i7 in range(0, 10):
                                for i8 in range(0, 10):
                                    if (not isDistinct(i1, i2, i3, i4, i5, i6, i7, i8, 2)):
                                        continue
                                    HAPPY = 10000 * i1 + 1000 * i2 + 100 * i3 + 10 * i3 + i4
                                    NEW = 100 * i5 + 10 * i6 + i7
                                    YEAR = 1000 * i4 + 100 * i6 + 10 * i2 + i8
                                    if (HAPPY - NEW == YEAR * 2):
                                        counter += 1
                                        print(&quot;%d - %d = %d * 2&quot; % (HAPPY, NEW, YEAR))
    if (counter &lt; 2):
        print(&quot;\nThere is %d solution.&quot; % (counter))
    else:
        print(&quot;\nThere are %d solutions.&quot; % (counter))


if __name__ == &quot;__main__&quot;:
    main()

</code></pre>
<p>Python Output:</p>
<pre><code class="language-python">
14776 - 890 = 6943 * 2

There is 1 solution.

Time elapsed: 128850 milliseconds.

</code></pre>
<p>Java:</p>
<p><em>Package name</em>: <code>math_puzzle</code>; <em>File name</em>: <code>Pr_22.java</code></p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_22
 */
public class Pr_22 {

    public static void main(final String... args) {
        long time = 0;
        time = System.currentTimeMillis();
        System.out.println(&quot;&quot;);
        Pr_22.solve();
        time = System.currentTimeMillis() - time;
        System.out.println(String.format(&quot;\nTime elapsed: %d millisecond&quot;, time) + (time &lt; 2 ? &quot;&quot; : &quot;s&quot;) + &quot;.\n&quot;);
    }

    public static boolean isDistinct(final int... elements) {
        final int l = elements.length;
        for (int i = 0; i &lt; l - 1; i++) {
            for (int j = i + 1; j &lt; l; j++) {
                if (elements[i] == elements[j]) {
                    return false;
                }
            }
        }
        return true;
    }

    public static void solve() {
        // HAPPY - NEW = YEAR * 2
        // H, A, P, Y, N, E, W, R: 0 ~ 9
        // H, Y, N &gt; 0
        // No letter can stand for 2
        // No two distinct letters stand for the same integer
        int counter = 0;
        int HAPPY = 0;
        int NEW = 0;
        int YEAR = 0;
        for (int i1 = 1; i1 &lt; 10; i1++) {
            for (int i2 = 0; i2 &lt; 10; i2++) {
                for (int i3 = 0; i3 &lt; 10; i3++) {
                    for (int i4 = 1; i4 &lt; 10; i4++) {
                        for (int i5 = 1; i5 &lt; 10; i5++) {
                            for (int i6 = 0; i6 &lt; 10; i6++) {
                                for (int i7 = 0; i7 &lt; 10; i7++) {
                                    for (int i8 = 0; i8 &lt; 10; i8++) {
                                        // Checks whether the numbers are distinct
                                        if (!Pr_22.isDistinct(i1, i2, i3, i4, i5, i6, i7, i8, 2)) {
                                            continue;
                                        }
                                        HAPPY = 10000 * i1 + 1000 * i2 + 100 * i3 + 10 * i3 + i4;
                                        NEW = 100 * i5 + 10 * i6 + i7;
                                        YEAR = 1000 * i4 + 100 * i6 + 10 * i2 + i8;
                                        if (HAPPY - NEW == YEAR * 2) {
                                            counter++;
                                            System.out.println(String.format(&quot;%d - %d = %d * 2&quot;, HAPPY, NEW, YEAR));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (counter &lt; 2) {
            System.out.println(String.format(&quot;\nThere is %d solution.&quot;, counter));
        } else {
            System.out.println(String.format(&quot;\nThere are %d solutions.&quot;, counter));
        }
    }

}

</code></pre>
<p>Java Output:</p>
<pre><code class="language-java">
14776 - 890 = 6943 * 2

There is 1 solution.

Time elapsed: 1633 milliseconds.

</code></pre>
<p>JavaScript:</p>
<pre><code class="language-javascript">&quot;use strict&quot;;

function main() {
    let args = [];
    for (let _i = 0; _i &lt; arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    let time = 0;
    time = (new Date()).valueOf();
    console.log(&quot;&quot;);
    solve();
    time = (new Date()).valueOf() - time;
    console.log(`\nTime elapsed: ${time} millisecond` + (time &lt; 2 ? &quot;&quot; : &quot;s&quot;) + &quot;.\n&quot;);
}

function isDistinct() {
    let elements = [];
    for (let _i = 0; _i &lt; arguments.length; _i++) {
        elements[_i] = arguments[_i];
    }
    let l = elements.length;
    for (let i = 0; i &lt; l - 1; i++) {
        for (let j = i + 1; j &lt; l; j++) {
            if (elements[i] === elements[j]) {
                return false;
            }
        }
    }
    return true;
}

function solve() {
    // HAPPY - NEW = YEAR * 2
    // H, A, P, Y, N, E, W, R: 0 ~ 9
    // H, Y, N &gt; 0
    // No letter can stand for 2
    // No two distinct letters stand for the same integer
    let counter = 0;
    let HAPPY = 0;
    let NEW = 0;
    let YEAR = 0;
    for (let i1 = 1; i1 &lt; 10; i1++) {
        for (let i2 = 0; i2 &lt; 10; i2++) {
            for (let i3 = 0; i3 &lt; 10; i3++) {
                for (let i4 = 1; i4 &lt; 10; i4++) {
                    for (let i5 = 1; i5 &lt; 10; i5++) {
                        for (let i6 = 0; i6 &lt; 10; i6++) {
                            for (let i7 = 0; i7 &lt; 10; i7++) {
                                for (let i8 = 0; i8 &lt; 10; i8++) {
                                    // Checks whether the numbers are distinct
                                    if (!isDistinct(i1, i2, i3, i4, i5, i6, i7, i8, 2)) {
                                        continue;
                                    }
                                    HAPPY = 10000 * i1 + 1000 * i2 + 100 * i3 + 10 * i3 + i4;
                                    NEW = 100 * i5 + 10 * i6 + i7;
                                    YEAR = 1000 * i4 + 100 * i6 + 10 * i2 + i8;
                                    if (HAPPY - NEW === YEAR * 2) {
                                        counter++;
                                        console.log(`${HAPPY} - ${NEW} = ${YEAR} * 2`);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (counter &lt; 2) {
        console.log(`\nThere is ${counter} solution.`);
    }
    else {
        console.log(`\nThere are ${counter} solutions.`);
    }
}

main();

</code></pre>
<p>JavaScript Output:</p>
<pre><code class="language-javascript">
14776 - 890 = 6943 * 2

There is 1 solution.

Time elapsed: 6518 milliseconds.

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[水 (0001)]]></title>
        <id>https://septsea.github.io/post/shui-0001/</id>
        <link href="https://septsea.github.io/post/shui-0001/">
        </link>
        <updated>2020-01-24T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>今天是除夕! 真好。</p>
<p>前面发了 6 篇英语文章。全都是蹩脚的表达, 实在抱歉。</p>
<p>好了, 今天我们再来看一个题。</p>
<p>A, B, C, D, E, F, G, H, I 表示 1~9, 且任意二个字母表示不同的数字。解方程</p>
<p>A / BC + D / EF = G / HI</p>
<p>逻辑解法太难想了, 就留给大佬吧。今天用 &quot;三国语言&quot; 解题嗷。</p>
<p>这是老干部 Python 跟二个小伙子 Java, JavaScript 的对决。我没说错! Python 就是比这二个语言老。</p>
<p>JavaScript 既可以在 Node.js 里运行, 也可以在浏览器里运行。我是在 Node.js 里运行的。</p>
<p>可以打开开发人员工具的 Console, 把代码放进去, 试着运行。</p>
<p>这里我只想说, TypeScript 真香!</p>
<p>不管怎么样, 答案先给出来嗷。</p>
<p>1 / 26 + 5 / 78 = 4 / 39</p>
<p>1 / 32 + 5 / 96 = 7 / 84</p>
<p>1 / 32 + 7 / 96 = 5 / 48</p>
<p>1 / 78 + 4 / 39 = 6 / 52</p>
<p>1 / 96 + 7 / 48 = 5 / 32</p>
<p>2 / 68 + 9 / 34 = 5 / 17</p>
<p>2 / 68 + 9 / 51 = 7 / 34</p>
<p>4 / 56 + 7 / 98 = 3 / 21</p>
<p>8 / 51 + 6 / 34 = 9 / 27</p>
<p>9 / 78 + 5 / 26 = 4 / 13</p>
<p>祝所有人新年快乐!</p>
<p>Python:</p>
<pre><code class="language-python">from time import time
from math import ceil


def main(*args) -&gt; None:
    t: float = 0
    t = time()
    print(&quot;&quot;)
    solve()
    t = time() - t
    ms: int = ceil(1000 * t)
    print(&quot;\nTime elapsed: &quot; + str(ms) + &quot; millisecond&quot; +
          (&quot;&quot; if ms &lt; 2 else &quot;s&quot;) + &quot;.\n&quot;)


def isDistinct(*elements) -&gt; bool:
    l: int = len(elements)
    for i in range(0, l - 1):
        for j in range(i + 1, l):
            if (elements[i] == elements[j]):
                return False
    return True


def solve() -&gt; None:
    # A / BC + D / EF = G / HI
    # This is
    # (A * EF + D * BC) * HI = G * BC * EF
    counter: int = 0
    for i1 in range(1, 10):
        for i2 in range(1, 10):
            for i3 in range(1, 10):
                for i4 in range(1, 10):
                    for i5 in range(1, 10):
                        for i6 in range(1, 10):
                            for i7 in range(1, 10):
                                for i8 in range(1, 10):
                                    for i9 in range(1, 10):
                                        # Checks whether the numbers are distinct
                                        if (not isDistinct(i1, i2, i3, i4, i5, i6, i7, i8, i9)):
                                            continue
                                        # Since both a + b and b + a are fine, WLOG let's display only one
                                        if (i1 * (10 * i5 + i6) &gt; i4 * (10 * i2 + i3)):
                                            continue
                                        if (i1 * (10 * i5 + i6) == i4 * (10 * i2 + i3) and i1 &gt; i4):
                                            continue
                                        if ((i1 * (10 * i5 + i6) + i4 * (10 * i2 + i3)) * (10 * i8 + i9) == i7 * (10 * i2 + i3) * (10 * i5 + i6)):
                                            counter += 1
                                            print(&quot;%d / %d%d + %d / %d%d = %d / %d%d&quot; %
                                                  (i1, i2, i3, i4, i5, i6, i7, i8, i9))
    if (counter &lt; 2):
        print(&quot;\nThere is %d solution.&quot; % (counter))
    else:
        print(&quot;\nThere are %d solutions.&quot; % (counter))


if __name__ == &quot;__main__&quot;:
    main()

</code></pre>
<p>Python Output:</p>
<pre><code class="language-python">
1 / 26 + 5 / 78 = 4 / 39
1 / 32 + 5 / 96 = 7 / 84
1 / 32 + 7 / 96 = 5 / 48
1 / 78 + 4 / 39 = 6 / 52
1 / 96 + 7 / 48 = 5 / 32
2 / 68 + 9 / 34 = 5 / 17
2 / 68 + 9 / 51 = 7 / 34
4 / 56 + 7 / 98 = 3 / 21
8 / 51 + 6 / 34 = 9 / 27
9 / 78 + 5 / 26 = 4 / 13

There are 10 solutions.

Time elapsed: 642010 milliseconds.

</code></pre>
<p>Java:</p>
<p><em>Package name</em>: <code>math_puzzle</code>; <em>File name</em>: <code>Pr_1.java</code></p>
<pre><code class="language-java">package math_puzzle;

/**
 * Pr_1
 */
public class Pr_1 {

    public static void main(final String... args) {
        long time = 0;
        time = System.currentTimeMillis();
        System.out.println(&quot;&quot;);
        Pr_1.solve();
        time = System.currentTimeMillis() - time;
        System.out.println(String.format(&quot;\nTime elapsed: %d millisecond&quot;, time) + (time &lt; 2 ? &quot;&quot; : &quot;s&quot;) + &quot;.\n&quot;);
    }

    public static boolean isDistinct(final int... elements) {
        final int l = elements.length;
        for (int i = 0; i &lt; l - 1; i++) {
            for (int j = i + 1; j &lt; l; j++) {
                if (elements[i] == elements[j]) {
                    return false;
                }
            }
        }
        return true;
    }

    public static void solve() {
        // A / BC + D / EF = G / HI
        // This is
        // (A * EF + D * BC) * HI = G * BC * EF
        int counter = 0;
        for (int i1 = 1; i1 &lt; 10; i1++) {
            for (int i2 = 1; i2 &lt; 10; i2++) {
                for (int i3 = 1; i3 &lt; 10; i3++) {
                    for (int i4 = 1; i4 &lt; 10; i4++) {
                        for (int i5 = 1; i5 &lt; 10; i5++) {
                            for (int i6 = 1; i6 &lt; 10; i6++) {
                                for (int i7 = 1; i7 &lt; 10; i7++) {
                                    for (int i8 = 1; i8 &lt; 10; i8++) {
                                        for (int i9 = 1; i9 &lt; 10; i9++) {
                                            // Checks whether the numbers are distinct
                                            if (!Pr_1.isDistinct(i1, i2, i3, i4, i5, i6, i7, i8, i9)) {
                                                continue;
                                            }
                                            // Since both a + b and b + a are fine, WLOG let's display only one
                                            if (i1 * (10 * i5 + i6) &gt; i4 * (10 * i2 + i3)) {
                                                continue;
                                            }
                                            if (i1 * (10 * i5 + i6) == i4 * (10 * i2 + i3) &amp;&amp; i1 &gt; i4) {
                                                continue;
                                            }
                                            if ((i1 * (10 * i5 + i6) + i4 * (10 * i2 + i3)) * (10 * i8 + i9) == i7
                                                    * (10 * i2 + i3) * (10 * i5 + i6)) {
                                                counter++;
                                                System.out.println(String.format(&quot;%d / %d%d + %d / %d%d = %d / %d%d&quot;,
                                                        i1, i2, i3, i4, i5, i6, i7, i8, i9));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (counter &lt; 2) {
            System.out.println(String.format(&quot;\nThere is %d solution.&quot;, counter));
        } else {
            System.out.println(String.format(&quot;\nThere are %d solutions.&quot;, counter));
        }
    }

}

</code></pre>
<p>Java Output:</p>
<pre><code class="language-java">
1 / 26 + 5 / 78 = 4 / 39
1 / 32 + 5 / 96 = 7 / 84
1 / 32 + 7 / 96 = 5 / 48
1 / 78 + 4 / 39 = 6 / 52
1 / 96 + 7 / 48 = 5 / 32
2 / 68 + 9 / 34 = 5 / 17
2 / 68 + 9 / 51 = 7 / 34
4 / 56 + 7 / 98 = 3 / 21
8 / 51 + 6 / 34 = 9 / 27
9 / 78 + 5 / 26 = 4 / 13

There are 10 solutions.

Time elapsed: 6806 milliseconds.

</code></pre>
<p>JavaScript:</p>
<pre><code class="language-javascript">&quot;use strict&quot;;

function main() {
    let args = [];
    for (let _i = 0; _i &lt; arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    let time = 0;
    time = (new Date()).valueOf();
    console.log(&quot;&quot;);
    solve();
    time = (new Date()).valueOf() - time;
    console.log(`\nTime elapsed: ${time} millisecond` + (time &lt; 2 ? &quot;&quot; : &quot;s&quot;) + &quot;.\n&quot;);
}

function isDistinct() {
    let elements = [];
    for (let _i = 0; _i &lt; arguments.length; _i++) {
        elements[_i] = arguments[_i];
    }
    let l = elements.length;
    for (let i = 0; i &lt; l - 1; i++) {
        for (let j = i + 1; j &lt; l; j++) {
            if (elements[i] === elements[j]) {
                return false;
            }
        }
    }
    return true;
}

function solve() {
    // A / BC + D / EF = G / HI
    // This is
    // (A * EF + D * BC) * HI = G * BC * EF
    let counter = 0;
    for (let i1 = 1; i1 &lt; 10; i1++) {
        for (let i2 = 1; i2 &lt; 10; i2++) {
            for (let i3 = 1; i3 &lt; 10; i3++) {
                for (let i4 = 1; i4 &lt; 10; i4++) {
                    for (let i5 = 1; i5 &lt; 10; i5++) {
                        for (let i6 = 1; i6 &lt; 10; i6++) {
                            for (let i7 = 1; i7 &lt; 10; i7++) {
                                for (let i8 = 1; i8 &lt; 10; i8++) {
                                    for (let i9 = 1; i9 &lt; 10; i9++) {
                                        // Checks whether the numbers are distinct
                                        if (!isDistinct(i1, i2, i3, i4, i5, i6, i7, i8, i9)) {
                                            continue;
                                        }
                                        // Since both a + b and b + a are fine, WLOG let's display only one
                                        if (i1 * (10 * i5 + i6) &gt; i4 * (10 * i2 + i3)) {
                                            continue;
                                        }
                                        if (i1 * (10 * i5 + i6) === i4 * (10 * i2 + i3) &amp;&amp; i1 &gt; i4) {
                                            continue;
                                        }
                                        if ((i1 * (10 * i5 + i6) + i4 * (10 * i2 + i3)) * (10 * i8 + i9) === i7 * (10 * i2 + i3) * (10 * i5 + i6)) {
                                            counter++;
                                            console.log(`${i1} / ${i2}${i3} + ${i4} / ${i5}${i6} = ${i7} / ${i8}${i9}`);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (counter &lt; 2) {
        console.log(`\nThere is ${counter} solution.`);
    }
    else {
        console.log(`\nThere are ${counter} solutions.`);
    }
}

main();

</code></pre>
<p>JavaScript Output:</p>
<pre><code class="language-javascript">
1 / 26 + 5 / 78 = 4 / 39
1 / 32 + 5 / 96 = 7 / 84
1 / 32 + 7 / 96 = 5 / 48
1 / 78 + 4 / 39 = 6 / 52
1 / 96 + 7 / 48 = 5 / 32
2 / 68 + 9 / 34 = 5 / 17
2 / 68 + 9 / 51 = 7 / 34
4 / 56 + 7 / 98 = 3 / 21
8 / 51 + 6 / 34 = 9 / 27
9 / 78 + 5 / 26 = 4 / 13

There are 10 solutions.

Time elapsed: 35266 milliseconds.

</code></pre>
]]></content>
    </entry>
</feed>